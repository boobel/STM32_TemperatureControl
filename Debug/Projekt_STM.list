
Projekt_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006160  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08006328  08006328  00016328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006358  08006358  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006358  08006358  00016358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006360  08006360  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006364  08006364  00016364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  2000000c  08006374  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  08006374  00020638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016670  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002851  00000000  00000000  000366ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00038f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  0003a158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026fb3  00000000  00000000  0003b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b69  00000000  00000000  0006226b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4749  00000000  00000000  00077dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016c51d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005044  00000000  00000000  0016c570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006310 	.word	0x08006310

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08006310 	.word	0x08006310

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_ldivmod>:
 8000a44:	b97b      	cbnz	r3, 8000a66 <__aeabi_ldivmod+0x22>
 8000a46:	b972      	cbnz	r2, 8000a66 <__aeabi_ldivmod+0x22>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bfbe      	ittt	lt
 8000a4c:	2000      	movlt	r0, #0
 8000a4e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a52:	e006      	blt.n	8000a62 <__aeabi_ldivmod+0x1e>
 8000a54:	bf08      	it	eq
 8000a56:	2800      	cmpeq	r0, #0
 8000a58:	bf1c      	itt	ne
 8000a5a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a5e:	f04f 30ff 	movne.w	r0, #4294967295
 8000a62:	f000 b9b9 	b.w	8000dd8 <__aeabi_idiv0>
 8000a66:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a6a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6e:	2900      	cmp	r1, #0
 8000a70:	db09      	blt.n	8000a86 <__aeabi_ldivmod+0x42>
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	db1a      	blt.n	8000aac <__aeabi_ldivmod+0x68>
 8000a76:	f000 f84d 	bl	8000b14 <__udivmoddi4>
 8000a7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a82:	b004      	add	sp, #16
 8000a84:	4770      	bx	lr
 8000a86:	4240      	negs	r0, r0
 8000a88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db1b      	blt.n	8000ac8 <__aeabi_ldivmod+0x84>
 8000a90:	f000 f840 	bl	8000b14 <__udivmoddi4>
 8000a94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a9c:	b004      	add	sp, #16
 8000a9e:	4240      	negs	r0, r0
 8000aa0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aa4:	4252      	negs	r2, r2
 8000aa6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aaa:	4770      	bx	lr
 8000aac:	4252      	negs	r2, r2
 8000aae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ab2:	f000 f82f 	bl	8000b14 <__udivmoddi4>
 8000ab6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000abe:	b004      	add	sp, #16
 8000ac0:	4240      	negs	r0, r0
 8000ac2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ac6:	4770      	bx	lr
 8000ac8:	4252      	negs	r2, r2
 8000aca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ace:	f000 f821 	bl	8000b14 <__udivmoddi4>
 8000ad2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ada:	b004      	add	sp, #16
 8000adc:	4252      	negs	r2, r2
 8000ade:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ae2:	4770      	bx	lr

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295
 8000af8:	f000 b96e 	b.w	8000dd8 <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f000 f806 	bl	8000b14 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	9d08      	ldr	r5, [sp, #32]
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	468c      	mov	ip, r1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f040 8083 	bne.w	8000c2a <__udivmoddi4+0x116>
 8000b24:	428a      	cmp	r2, r1
 8000b26:	4617      	mov	r7, r2
 8000b28:	d947      	bls.n	8000bba <__udivmoddi4+0xa6>
 8000b2a:	fab2 f282 	clz	r2, r2
 8000b2e:	b142      	cbz	r2, 8000b42 <__udivmoddi4+0x2e>
 8000b30:	f1c2 0020 	rsb	r0, r2, #32
 8000b34:	fa24 f000 	lsr.w	r0, r4, r0
 8000b38:	4091      	lsls	r1, r2
 8000b3a:	4097      	lsls	r7, r2
 8000b3c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b40:	4094      	lsls	r4, r2
 8000b42:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b46:	0c23      	lsrs	r3, r4, #16
 8000b48:	fbbc f6f8 	udiv	r6, ip, r8
 8000b4c:	fa1f fe87 	uxth.w	lr, r7
 8000b50:	fb08 c116 	mls	r1, r8, r6, ip
 8000b54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b58:	fb06 f10e 	mul.w	r1, r6, lr
 8000b5c:	4299      	cmp	r1, r3
 8000b5e:	d909      	bls.n	8000b74 <__udivmoddi4+0x60>
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b66:	f080 8119 	bcs.w	8000d9c <__udivmoddi4+0x288>
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	f240 8116 	bls.w	8000d9c <__udivmoddi4+0x288>
 8000b70:	3e02      	subs	r6, #2
 8000b72:	443b      	add	r3, r7
 8000b74:	1a5b      	subs	r3, r3, r1
 8000b76:	b2a4      	uxth	r4, r4
 8000b78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b88:	45a6      	cmp	lr, r4
 8000b8a:	d909      	bls.n	8000ba0 <__udivmoddi4+0x8c>
 8000b8c:	193c      	adds	r4, r7, r4
 8000b8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b92:	f080 8105 	bcs.w	8000da0 <__udivmoddi4+0x28c>
 8000b96:	45a6      	cmp	lr, r4
 8000b98:	f240 8102 	bls.w	8000da0 <__udivmoddi4+0x28c>
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	443c      	add	r4, r7
 8000ba0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba4:	eba4 040e 	sub.w	r4, r4, lr
 8000ba8:	2600      	movs	r6, #0
 8000baa:	b11d      	cbz	r5, 8000bb4 <__udivmoddi4+0xa0>
 8000bac:	40d4      	lsrs	r4, r2
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	b902      	cbnz	r2, 8000bbe <__udivmoddi4+0xaa>
 8000bbc:	deff      	udf	#255	; 0xff
 8000bbe:	fab2 f282 	clz	r2, r2
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d150      	bne.n	8000c68 <__udivmoddi4+0x154>
 8000bc6:	1bcb      	subs	r3, r1, r7
 8000bc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bcc:	fa1f f887 	uxth.w	r8, r7
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bd6:	0c21      	lsrs	r1, r4, #16
 8000bd8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb08 f30c 	mul.w	r3, r8, ip
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0xe4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0xe2>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	f200 80e9 	bhi.w	8000dc8 <__udivmoddi4+0x2b4>
 8000bf6:	4684      	mov	ip, r0
 8000bf8:	1ac9      	subs	r1, r1, r3
 8000bfa:	b2a3      	uxth	r3, r4
 8000bfc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c00:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c04:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c08:	fb08 f800 	mul.w	r8, r8, r0
 8000c0c:	45a0      	cmp	r8, r4
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0x10c>
 8000c10:	193c      	adds	r4, r7, r4
 8000c12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x10a>
 8000c18:	45a0      	cmp	r8, r4
 8000c1a:	f200 80d9 	bhi.w	8000dd0 <__udivmoddi4+0x2bc>
 8000c1e:	4618      	mov	r0, r3
 8000c20:	eba4 0408 	sub.w	r4, r4, r8
 8000c24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c28:	e7bf      	b.n	8000baa <__udivmoddi4+0x96>
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0x12e>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80b1 	beq.w	8000d96 <__udivmoddi4+0x282>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x1cc>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0x140>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80b8 	bhi.w	8000dc4 <__udivmoddi4+0x2b0>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0103 	sbc.w	r1, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	468c      	mov	ip, r1
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0a8      	beq.n	8000bb4 <__udivmoddi4+0xa0>
 8000c62:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c66:	e7a5      	b.n	8000bb4 <__udivmoddi4+0xa0>
 8000c68:	f1c2 0320 	rsb	r3, r2, #32
 8000c6c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c70:	4097      	lsls	r7, r2
 8000c72:	fa01 f002 	lsl.w	r0, r1, r2
 8000c76:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7a:	40d9      	lsrs	r1, r3
 8000c7c:	4330      	orrs	r0, r6
 8000c7e:	0c03      	lsrs	r3, r0, #16
 8000c80:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c84:	fa1f f887 	uxth.w	r8, r7
 8000c88:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c90:	fb06 f108 	mul.w	r1, r6, r8
 8000c94:	4299      	cmp	r1, r3
 8000c96:	fa04 f402 	lsl.w	r4, r4, r2
 8000c9a:	d909      	bls.n	8000cb0 <__udivmoddi4+0x19c>
 8000c9c:	18fb      	adds	r3, r7, r3
 8000c9e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ca2:	f080 808d 	bcs.w	8000dc0 <__udivmoddi4+0x2ac>
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	f240 808a 	bls.w	8000dc0 <__udivmoddi4+0x2ac>
 8000cac:	3e02      	subs	r6, #2
 8000cae:	443b      	add	r3, r7
 8000cb0:	1a5b      	subs	r3, r3, r1
 8000cb2:	b281      	uxth	r1, r0
 8000cb4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cbc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc0:	fb00 f308 	mul.w	r3, r0, r8
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x1c4>
 8000cc8:	1879      	adds	r1, r7, r1
 8000cca:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cce:	d273      	bcs.n	8000db8 <__udivmoddi4+0x2a4>
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d971      	bls.n	8000db8 <__udivmoddi4+0x2a4>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4439      	add	r1, r7
 8000cd8:	1acb      	subs	r3, r1, r3
 8000cda:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cde:	e778      	b.n	8000bd2 <__udivmoddi4+0xbe>
 8000ce0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ce4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ce8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cec:	431c      	orrs	r4, r3
 8000cee:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cfa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cfe:	431f      	orrs	r7, r3
 8000d00:	0c3b      	lsrs	r3, r7, #16
 8000d02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d06:	fa1f f884 	uxth.w	r8, r4
 8000d0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d0e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d12:	fb09 fa08 	mul.w	sl, r9, r8
 8000d16:	458a      	cmp	sl, r1
 8000d18:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x220>
 8000d22:	1861      	adds	r1, r4, r1
 8000d24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d28:	d248      	bcs.n	8000dbc <__udivmoddi4+0x2a8>
 8000d2a:	458a      	cmp	sl, r1
 8000d2c:	d946      	bls.n	8000dbc <__udivmoddi4+0x2a8>
 8000d2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d32:	4421      	add	r1, r4
 8000d34:	eba1 010a 	sub.w	r1, r1, sl
 8000d38:	b2bf      	uxth	r7, r7
 8000d3a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d42:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d46:	fb00 f808 	mul.w	r8, r0, r8
 8000d4a:	45b8      	cmp	r8, r7
 8000d4c:	d907      	bls.n	8000d5e <__udivmoddi4+0x24a>
 8000d4e:	19e7      	adds	r7, r4, r7
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d22e      	bcs.n	8000db4 <__udivmoddi4+0x2a0>
 8000d56:	45b8      	cmp	r8, r7
 8000d58:	d92c      	bls.n	8000db4 <__udivmoddi4+0x2a0>
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	4427      	add	r7, r4
 8000d5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d62:	eba7 0708 	sub.w	r7, r7, r8
 8000d66:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6a:	454f      	cmp	r7, r9
 8000d6c:	46c6      	mov	lr, r8
 8000d6e:	4649      	mov	r1, r9
 8000d70:	d31a      	bcc.n	8000da8 <__udivmoddi4+0x294>
 8000d72:	d017      	beq.n	8000da4 <__udivmoddi4+0x290>
 8000d74:	b15d      	cbz	r5, 8000d8e <__udivmoddi4+0x27a>
 8000d76:	ebb3 020e 	subs.w	r2, r3, lr
 8000d7a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d7e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d82:	40f2      	lsrs	r2, r6
 8000d84:	ea4c 0202 	orr.w	r2, ip, r2
 8000d88:	40f7      	lsrs	r7, r6
 8000d8a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d8e:	2600      	movs	r6, #0
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	462e      	mov	r6, r5
 8000d98:	4628      	mov	r0, r5
 8000d9a:	e70b      	b.n	8000bb4 <__udivmoddi4+0xa0>
 8000d9c:	4606      	mov	r6, r0
 8000d9e:	e6e9      	b.n	8000b74 <__udivmoddi4+0x60>
 8000da0:	4618      	mov	r0, r3
 8000da2:	e6fd      	b.n	8000ba0 <__udivmoddi4+0x8c>
 8000da4:	4543      	cmp	r3, r8
 8000da6:	d2e5      	bcs.n	8000d74 <__udivmoddi4+0x260>
 8000da8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dac:	eb69 0104 	sbc.w	r1, r9, r4
 8000db0:	3801      	subs	r0, #1
 8000db2:	e7df      	b.n	8000d74 <__udivmoddi4+0x260>
 8000db4:	4608      	mov	r0, r1
 8000db6:	e7d2      	b.n	8000d5e <__udivmoddi4+0x24a>
 8000db8:	4660      	mov	r0, ip
 8000dba:	e78d      	b.n	8000cd8 <__udivmoddi4+0x1c4>
 8000dbc:	4681      	mov	r9, r0
 8000dbe:	e7b9      	b.n	8000d34 <__udivmoddi4+0x220>
 8000dc0:	4666      	mov	r6, ip
 8000dc2:	e775      	b.n	8000cb0 <__udivmoddi4+0x19c>
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e74a      	b.n	8000c5e <__udivmoddi4+0x14a>
 8000dc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dcc:	4439      	add	r1, r7
 8000dce:	e713      	b.n	8000bf8 <__udivmoddi4+0xe4>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	e724      	b.n	8000c20 <__udivmoddi4+0x10c>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af02      	add	r7, sp, #8
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8000dea:	7b3b      	ldrb	r3, [r7, #12]
 8000dec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2110      	movs	r1, #16
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <BMP280_Read8+0x4c>)
 8000dfa:	f001 fcfb 	bl	80027f4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <BMP280_Read8+0x50>)
 8000e00:	6818      	ldr	r0, [r3, #0]
 8000e02:	f107 020c 	add.w	r2, r7, #12
 8000e06:	f107 010c 	add.w	r1, r7, #12
 8000e0a:	230a      	movs	r3, #10
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2302      	movs	r3, #2
 8000e10:	f002 ffa3 	bl	8003d5a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2110      	movs	r1, #16
 8000e18:	4803      	ldr	r0, [pc, #12]	; (8000e28 <BMP280_Read8+0x4c>)
 8000e1a:	f001 fceb 	bl	80027f4 <HAL_GPIO_WritePin>
	return tmp[1];
 8000e1e:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	20000040 	.word	0x20000040

08000e30 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8000e3e:	7b3b      	ldrb	r3, [r7, #12]
 8000e40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	480f      	ldr	r0, [pc, #60]	; (8000e8c <BMP280_Read16+0x5c>)
 8000e4e:	f001 fcd1 	bl	80027f4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <BMP280_Read16+0x60>)
 8000e54:	6818      	ldr	r0, [r3, #0]
 8000e56:	f107 020c 	add.w	r2, r7, #12
 8000e5a:	f107 010c 	add.w	r1, r7, #12
 8000e5e:	230a      	movs	r3, #10
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2303      	movs	r3, #3
 8000e64:	f002 ff79 	bl	8003d5a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	4807      	ldr	r0, [pc, #28]	; (8000e8c <BMP280_Read16+0x5c>)
 8000e6e:	f001 fcc1 	bl	80027f4 <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 8000e72:	7b7b      	ldrb	r3, [r7, #13]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	7bbb      	ldrb	r3, [r7, #14]
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	b21b      	sxth	r3, r3
 8000e80:	b29b      	uxth	r3, r3
#endif
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	20000040 	.word	0x20000040

08000e94 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ffc5 	bl	8000e30 <BMP280_Read16>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8000eaa:	89fb      	ldrh	r3, [r7, #14]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	89fb      	ldrh	r3, [r7, #14]
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	b29b      	uxth	r3, r3
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 8000edc:	7b3b      	ldrb	r3, [r7, #12]
 8000ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 8000ee6:	79bb      	ldrb	r3, [r7, #6]
 8000ee8:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2110      	movs	r1, #16
 8000eee:	480b      	ldr	r0, [pc, #44]	; (8000f1c <BMP280_Write8+0x54>)
 8000ef0:	f001 fc80 	bl	80027f4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <BMP280_Write8+0x58>)
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	f107 020c 	add.w	r2, r7, #12
 8000efc:	f107 010c 	add.w	r1, r7, #12
 8000f00:	230a      	movs	r3, #10
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2302      	movs	r3, #2
 8000f06:	f002 ff28 	bl	8003d5a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <BMP280_Write8+0x54>)
 8000f10:	f001 fc70 	bl	80027f4 <HAL_GPIO_WritePin>
#endif
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	20000040 	.word	0x20000040

08000f24 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8000f32:	7b3b      	ldrb	r3, [r7, #12]
 8000f34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2110      	movs	r1, #16
 8000f40:	480e      	ldr	r0, [pc, #56]	; (8000f7c <BMP280_Read24+0x58>)
 8000f42:	f001 fc57 	bl	80027f4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <BMP280_Read24+0x5c>)
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	f107 020c 	add.w	r2, r7, #12
 8000f4e:	f107 010c 	add.w	r1, r7, #12
 8000f52:	230a      	movs	r3, #10
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2303      	movs	r3, #3
 8000f58:	f002 feff 	bl	8003d5a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2110      	movs	r1, #16
 8000f60:	4806      	ldr	r0, [pc, #24]	; (8000f7c <BMP280_Read24+0x58>)
 8000f62:	f001 fc47 	bl	80027f4 <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 8000f66:	7b7b      	ldrb	r3, [r7, #13]
 8000f68:	041a      	lsls	r2, r3, #16
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	4313      	orrs	r3, r2
#endif
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	20000040 	.word	0x20000040

08000f84 <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	4608      	mov	r0, r1
 8000f8e:	4611      	mov	r1, r2
 8000f90:	461a      	mov	r2, r3
 8000f92:	4603      	mov	r3, r0
 8000f94:	70fb      	strb	r3, [r7, #3]
 8000f96:	460b      	mov	r3, r1
 8000f98:	70bb      	strb	r3, [r7, #2]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 8000f9e:	4a4e      	ldr	r2, [pc, #312]	; (80010d8 <BMP280_Init+0x154>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2110      	movs	r1, #16
 8000fa8:	484c      	ldr	r0, [pc, #304]	; (80010dc <BMP280_Init+0x158>)
 8000faa:	f001 fc23 	bl	80027f4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000fae:	2005      	movs	r0, #5
 8000fb0:	f001 f96a 	bl	8002288 <HAL_Delay>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	4848      	ldr	r0, [pc, #288]	; (80010dc <BMP280_Init+0x158>)
 8000fba:	f001 fc1b 	bl	80027f4 <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 8000fbe:	787b      	ldrb	r3, [r7, #1]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d901      	bls.n	8000fc8 <BMP280_Init+0x44>
	    mode = BMP280_NORMALMODE;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8000fc8:	4a45      	ldr	r2, [pc, #276]	; (80010e0 <BMP280_Init+0x15c>)
 8000fca:	787b      	ldrb	r3, [r7, #1]
 8000fcc:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8000fce:	787b      	ldrb	r3, [r7, #1]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d101      	bne.n	8000fd8 <BMP280_Init+0x54>
		mode = BMP280_SLEEPMODE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	2b05      	cmp	r3, #5
 8000fdc:	d901      	bls.n	8000fe2 <BMP280_Init+0x5e>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8000fe2:	4a40      	ldr	r2, [pc, #256]	; (80010e4 <BMP280_Init+0x160>)
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8000fe8:	78bb      	ldrb	r3, [r7, #2]
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	d901      	bls.n	8000ff2 <BMP280_Init+0x6e>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8000fee:	2305      	movs	r3, #5
 8000ff0:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8000ff2:	4a3d      	ldr	r2, [pc, #244]	; (80010e8 <BMP280_Init+0x164>)
 8000ff4:	78bb      	ldrb	r3, [r7, #2]
 8000ff6:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8000ff8:	bf00      	nop
 8000ffa:	20d0      	movs	r0, #208	; 0xd0
 8000ffc:	f7ff feee 	bl	8000ddc <BMP280_Read8>
 8001000:	4603      	mov	r3, r0
 8001002:	2b58      	cmp	r3, #88	; 0x58
 8001004:	d1f9      	bne.n	8000ffa <BMP280_Init+0x76>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001006:	2088      	movs	r0, #136	; 0x88
 8001008:	f7ff ff44 	bl	8000e94 <BMP280_Read16LE>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b36      	ldr	r3, [pc, #216]	; (80010ec <BMP280_Init+0x168>)
 8001012:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001014:	208a      	movs	r0, #138	; 0x8a
 8001016:	f7ff ff3d 	bl	8000e94 <BMP280_Read16LE>
 800101a:	4603      	mov	r3, r0
 800101c:	b21a      	sxth	r2, r3
 800101e:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <BMP280_Init+0x16c>)
 8001020:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001022:	208c      	movs	r0, #140	; 0x8c
 8001024:	f7ff ff36 	bl	8000e94 <BMP280_Read16LE>
 8001028:	4603      	mov	r3, r0
 800102a:	b21a      	sxth	r2, r3
 800102c:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <BMP280_Init+0x170>)
 800102e:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8001030:	208e      	movs	r0, #142	; 0x8e
 8001032:	f7ff ff2f 	bl	8000e94 <BMP280_Read16LE>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <BMP280_Init+0x174>)
 800103c:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 800103e:	2090      	movs	r0, #144	; 0x90
 8001040:	f7ff ff28 	bl	8000e94 <BMP280_Read16LE>
 8001044:	4603      	mov	r3, r0
 8001046:	b21a      	sxth	r2, r3
 8001048:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <BMP280_Init+0x178>)
 800104a:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 800104c:	2092      	movs	r0, #146	; 0x92
 800104e:	f7ff ff21 	bl	8000e94 <BMP280_Read16LE>
 8001052:	4603      	mov	r3, r0
 8001054:	b21a      	sxth	r2, r3
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <BMP280_Init+0x17c>)
 8001058:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 800105a:	2094      	movs	r0, #148	; 0x94
 800105c:	f7ff ff1a 	bl	8000e94 <BMP280_Read16LE>
 8001060:	4603      	mov	r3, r0
 8001062:	b21a      	sxth	r2, r3
 8001064:	4b27      	ldr	r3, [pc, #156]	; (8001104 <BMP280_Init+0x180>)
 8001066:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001068:	2096      	movs	r0, #150	; 0x96
 800106a:	f7ff ff13 	bl	8000e94 <BMP280_Read16LE>
 800106e:	4603      	mov	r3, r0
 8001070:	b21a      	sxth	r2, r3
 8001072:	4b25      	ldr	r3, [pc, #148]	; (8001108 <BMP280_Init+0x184>)
 8001074:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001076:	2098      	movs	r0, #152	; 0x98
 8001078:	f7ff ff0c 	bl	8000e94 <BMP280_Read16LE>
 800107c:	4603      	mov	r3, r0
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <BMP280_Init+0x188>)
 8001082:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001084:	209a      	movs	r0, #154	; 0x9a
 8001086:	f7ff ff05 	bl	8000e94 <BMP280_Read16LE>
 800108a:	4603      	mov	r3, r0
 800108c:	b21a      	sxth	r2, r3
 800108e:	4b20      	ldr	r3, [pc, #128]	; (8001110 <BMP280_Init+0x18c>)
 8001090:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001092:	209c      	movs	r0, #156	; 0x9c
 8001094:	f7ff fefe 	bl	8000e94 <BMP280_Read16LE>
 8001098:	4603      	mov	r3, r0
 800109a:	b21a      	sxth	r2, r3
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <BMP280_Init+0x190>)
 800109e:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80010a0:	209e      	movs	r0, #158	; 0x9e
 80010a2:	f7ff fef7 	bl	8000e94 <BMP280_Read16LE>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <BMP280_Init+0x194>)
 80010ac:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	015b      	lsls	r3, r3, #5
 80010b2:	b25a      	sxtb	r2, r3
 80010b4:	78bb      	ldrb	r3, [r7, #2]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b25a      	sxtb	r2, r3
 80010be:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4619      	mov	r1, r3
 80010ca:	20f4      	movs	r0, #244	; 0xf4
 80010cc:	f7ff fefc 	bl	8000ec8 <BMP280_Write8>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000040 	.word	0x20000040
 80010dc:	40020000 	.word	0x40020000
 80010e0:	20000047 	.word	0x20000047
 80010e4:	20000046 	.word	0x20000046
 80010e8:	20000032 	.word	0x20000032
 80010ec:	20000044 	.word	0x20000044
 80010f0:	20000034 	.word	0x20000034
 80010f4:	2000002c 	.word	0x2000002c
 80010f8:	20000038 	.word	0x20000038
 80010fc:	2000002e 	.word	0x2000002e
 8001100:	20000048 	.word	0x20000048
 8001104:	2000004c 	.word	0x2000004c
 8001108:	20000036 	.word	0x20000036
 800110c:	2000003c 	.word	0x2000003c
 8001110:	20000030 	.word	0x20000030
 8001114:	2000003a 	.word	0x2000003a
 8001118:	2000004a 	.word	0x2000004a

0800111c <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8001122:	4b3d      	ldr	r3, [pc, #244]	; (8001218 <BMP280_ReadTemperature+0xfc>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d16d      	bne.n	8001206 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800112a:	20f4      	movs	r0, #244	; 0xf4
 800112c:	f7ff fe56 	bl	8000ddc <BMP280_Read8>
 8001130:	4603      	mov	r3, r0
 8001132:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	f023 0303 	bic.w	r3, r3, #3
 800113a:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 800113c:	7dfb      	ldrb	r3, [r7, #23]
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001144:	7dfb      	ldrb	r3, [r7, #23]
 8001146:	4619      	mov	r1, r3
 8001148:	20f4      	movs	r0, #244	; 0xf4
 800114a:	f7ff febd 	bl	8000ec8 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800114e:	20f4      	movs	r0, #244	; 0xf4
 8001150:	f7ff fe44 	bl	8000ddc <BMP280_Read8>
 8001154:	4603      	mov	r3, r0
 8001156:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001158:	7dbb      	ldrb	r3, [r7, #22]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001160:	7dbb      	ldrb	r3, [r7, #22]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d14f      	bne.n	8001206 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001166:	20f4      	movs	r0, #244	; 0xf4
 8001168:	f7ff fe38 	bl	8000ddc <BMP280_Read8>
 800116c:	4603      	mov	r3, r0
 800116e:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001170:	7dbb      	ldrb	r3, [r7, #22]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001178:	7dbb      	ldrb	r3, [r7, #22]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d000      	beq.n	8001180 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800117e:	e7f2      	b.n	8001166 <BMP280_ReadTemperature+0x4a>
				  break;
 8001180:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001182:	20fa      	movs	r0, #250	; 0xfa
 8001184:	f7ff fece 	bl	8000f24 <BMP280_Read24>
 8001188:	4603      	mov	r3, r0
 800118a:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	111b      	asrs	r3, r3, #4
 8001190:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	10da      	asrs	r2, r3, #3
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <BMP280_ReadTemperature+0x100>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800119e:	4a20      	ldr	r2, [pc, #128]	; (8001220 <BMP280_ReadTemperature+0x104>)
 80011a0:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	12db      	asrs	r3, r3, #11
 80011aa:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	111b      	asrs	r3, r3, #4
 80011b0:	4a1a      	ldr	r2, [pc, #104]	; (800121c <BMP280_ReadTemperature+0x100>)
 80011b2:	8812      	ldrh	r2, [r2, #0]
 80011b4:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	1112      	asrs	r2, r2, #4
 80011ba:	4918      	ldr	r1, [pc, #96]	; (800121c <BMP280_ReadTemperature+0x100>)
 80011bc:	8809      	ldrh	r1, [r1, #0]
 80011be:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80011c4:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80011c6:	4a17      	ldr	r2, [pc, #92]	; (8001224 <BMP280_ReadTemperature+0x108>)
 80011c8:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80011cc:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80011d0:	139b      	asrs	r3, r3, #14
 80011d2:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	4413      	add	r3, r2
 80011da:	4a13      	ldr	r2, [pc, #76]	; (8001228 <BMP280_ReadTemperature+0x10c>)
 80011dc:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <BMP280_ReadTemperature+0x10c>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	3380      	adds	r3, #128	; 0x80
 80011ea:	121b      	asrs	r3, r3, #8
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f4:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80011f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011fc:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800122c <BMP280_ReadTemperature+0x110>
 8001200:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001204:	e001      	b.n	800120a <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001206:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001230 <BMP280_ReadTemperature+0x114>
 800120a:	eef0 7a47 	vmov.f32	s15, s14
}
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000047 	.word	0x20000047
 800121c:	20000044 	.word	0x20000044
 8001220:	20000034 	.word	0x20000034
 8001224:	2000002c 	.word	0x2000002c
 8001228:	20000050 	.word	0x20000050
 800122c:	42c80000 	.word	0x42c80000
 8001230:	c2c60000 	.word	0xc2c60000

08001234 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001238:	b09c      	sub	sp, #112	; 0x70
 800123a:	af00      	add	r7, sp, #0
 800123c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800123e:	64b9      	str	r1, [r7, #72]	; 0x48
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001240:	f7ff ff6c 	bl	800111c <BMP280_ReadTemperature>
 8001244:	eef0 7a40 	vmov.f32	s15, s0
 8001248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800124a:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 800124e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001424 <BMP280_ReadTemperatureAndPressure+0x1f0>
 8001258:	eef4 7a47 	vcmp.f32	s15, s14
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	d101      	bne.n	8001266 <BMP280_ReadTemperatureAndPressure+0x32>
		  return -1;
 8001262:	23ff      	movs	r3, #255	; 0xff
 8001264:	e1d8      	b.n	8001618 <BMP280_ReadTemperatureAndPressure+0x3e4>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8001266:	20f7      	movs	r0, #247	; 0xf7
 8001268:	f7ff fe5c 	bl	8000f24 <BMP280_Read24>
 800126c:	4603      	mov	r3, r0
 800126e:	66fb      	str	r3, [r7, #108]	; 0x6c
	  adc_P >>= 4;
 8001270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001272:	111b      	asrs	r3, r3, #4
 8001274:	66fb      	str	r3, [r7, #108]	; 0x6c

	  var1 = ((int64_t)t_fine) - 128000;
 8001276:	4b6c      	ldr	r3, [pc, #432]	; (8001428 <BMP280_ReadTemperatureAndPressure+0x1f4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001280:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001284:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001288:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	  var2 = var1 * var1 * (int64_t)p6;
 800128c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800128e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001290:	fb03 f102 	mul.w	r1, r3, r2
 8001294:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001298:	fb03 f302 	mul.w	r3, r3, r2
 800129c:	18ca      	adds	r2, r1, r3
 800129e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012a0:	fba3 4503 	umull	r4, r5, r3, r3
 80012a4:	1953      	adds	r3, r2, r5
 80012a6:	461d      	mov	r5, r3
 80012a8:	4b60      	ldr	r3, [pc, #384]	; (800142c <BMP280_ReadTemperatureAndPressure+0x1f8>)
 80012aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012b4:	fb02 f005 	mul.w	r0, r2, r5
 80012b8:	fb04 f103 	mul.w	r1, r4, r3
 80012bc:	4401      	add	r1, r0
 80012be:	fba4 2302 	umull	r2, r3, r4, r2
 80012c2:	4419      	add	r1, r3
 80012c4:	460b      	mov	r3, r1
 80012c6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80012ca:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80012ce:	4b58      	ldr	r3, [pc, #352]	; (8001430 <BMP280_ReadTemperatureAndPressure+0x1fc>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80012dc:	fb03 f001 	mul.w	r0, r3, r1
 80012e0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80012e2:	fb02 f101 	mul.w	r1, r2, r1
 80012e6:	4408      	add	r0, r1
 80012e8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80012ea:	fba1 2302 	umull	r2, r3, r1, r2
 80012ee:	18c1      	adds	r1, r0, r3
 80012f0:	460b      	mov	r3, r1
 80012f2:	f04f 0000 	mov.w	r0, #0
 80012f6:	f04f 0100 	mov.w	r1, #0
 80012fa:	0459      	lsls	r1, r3, #17
 80012fc:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001300:	0450      	lsls	r0, r2, #17
 8001302:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001306:	eb12 0800 	adds.w	r8, r2, r0
 800130a:	eb43 0901 	adc.w	r9, r3, r1
 800130e:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	  var2 = var2 + (((int64_t)p4)<<35);
 8001312:	4b48      	ldr	r3, [pc, #288]	; (8001434 <BMP280_ReadTemperatureAndPressure+0x200>)
 8001314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001318:	b21a      	sxth	r2, r3
 800131a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800131e:	f04f 0000 	mov.w	r0, #0
 8001322:	f04f 0100 	mov.w	r1, #0
 8001326:	00d1      	lsls	r1, r2, #3
 8001328:	2000      	movs	r0, #0
 800132a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800132e:	1814      	adds	r4, r2, r0
 8001330:	61bc      	str	r4, [r7, #24]
 8001332:	414b      	adcs	r3, r1
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800133a:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800133e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001342:	fb03 f102 	mul.w	r1, r3, r2
 8001346:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800134a:	fb03 f302 	mul.w	r3, r3, r2
 800134e:	18ca      	adds	r2, r1, r3
 8001350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001352:	fba3 4503 	umull	r4, r5, r3, r3
 8001356:	1953      	adds	r3, r2, r5
 8001358:	461d      	mov	r5, r3
 800135a:	4b37      	ldr	r3, [pc, #220]	; (8001438 <BMP280_ReadTemperatureAndPressure+0x204>)
 800135c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001360:	b21a      	sxth	r2, r3
 8001362:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001366:	fb02 f005 	mul.w	r0, r2, r5
 800136a:	fb04 f103 	mul.w	r1, r4, r3
 800136e:	4401      	add	r1, r0
 8001370:	fba4 2302 	umull	r2, r3, r4, r2
 8001374:	4419      	add	r1, r3
 8001376:	460b      	mov	r3, r1
 8001378:	f04f 0800 	mov.w	r8, #0
 800137c:	f04f 0900 	mov.w	r9, #0
 8001380:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001384:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8001388:	ea4f 2923 	mov.w	r9, r3, asr #8
	    ((var1 * (int64_t)p2)<<12);
 800138c:	4b2b      	ldr	r3, [pc, #172]	; (800143c <BMP280_ReadTemperatureAndPressure+0x208>)
 800138e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001392:	b21a      	sxth	r2, r3
 8001394:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001398:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800139a:	fb03 f001 	mul.w	r0, r3, r1
 800139e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80013a0:	fb02 f101 	mul.w	r1, r2, r1
 80013a4:	1844      	adds	r4, r0, r1
 80013a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80013a8:	fba1 0102 	umull	r0, r1, r1, r2
 80013ac:	1863      	adds	r3, r4, r1
 80013ae:	4619      	mov	r1, r3
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	030b      	lsls	r3, r1, #12
 80013ba:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80013be:	0302      	lsls	r2, r0, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80013c0:	eb18 0102 	adds.w	r1, r8, r2
 80013c4:	6139      	str	r1, [r7, #16]
 80013c6:	eb49 0303 	adc.w	r3, r9, r3
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80013d0:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80013d4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80013d8:	1c11      	adds	r1, r2, #0
 80013da:	6439      	str	r1, [r7, #64]	; 0x40
 80013dc:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 80013e0:	647b      	str	r3, [r7, #68]	; 0x44
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <BMP280_ReadTemperatureAndPressure+0x20c>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80013f0:	4629      	mov	r1, r5
 80013f2:	fb02 f001 	mul.w	r0, r2, r1
 80013f6:	4621      	mov	r1, r4
 80013f8:	fb01 f103 	mul.w	r1, r1, r3
 80013fc:	4401      	add	r1, r0
 80013fe:	4620      	mov	r0, r4
 8001400:	fba0 2302 	umull	r2, r3, r0, r2
 8001404:	4419      	add	r1, r3
 8001406:	460b      	mov	r3, r1
 8001408:	f04f 0000 	mov.w	r0, #0
 800140c:	f04f 0100 	mov.w	r1, #0
 8001410:	1058      	asrs	r0, r3, #1
 8001412:	17d9      	asrs	r1, r3, #31
 8001414:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	  if (var1 == 0) {
 8001418:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800141c:	4313      	orrs	r3, r2
 800141e:	d111      	bne.n	8001444 <BMP280_ReadTemperatureAndPressure+0x210>
	    return 0;  // avoid exception caused by division by zero
 8001420:	2300      	movs	r3, #0
 8001422:	e0f9      	b.n	8001618 <BMP280_ReadTemperatureAndPressure+0x3e4>
 8001424:	c2c60000 	.word	0xc2c60000
 8001428:	20000050 	.word	0x20000050
 800142c:	2000003c 	.word	0x2000003c
 8001430:	20000036 	.word	0x20000036
 8001434:	2000004c 	.word	0x2000004c
 8001438:	20000048 	.word	0x20000048
 800143c:	2000002e 	.word	0x2000002e
 8001440:	20000038 	.word	0x20000038
	  }
	  p = 1048576 - adc_P;
 8001444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001446:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800144a:	461a      	mov	r2, r3
 800144c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001450:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  p = (((p<<31) - var2)*3125) / var1;
 8001454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001456:	105b      	asrs	r3, r3, #1
 8001458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800145a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800145c:	07db      	lsls	r3, r3, #31
 800145e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001460:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001464:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001468:	4621      	mov	r1, r4
 800146a:	ebb1 0a02 	subs.w	sl, r1, r2
 800146e:	4629      	mov	r1, r5
 8001470:	eb61 0b03 	sbc.w	fp, r1, r3
 8001474:	4652      	mov	r2, sl
 8001476:	465b      	mov	r3, fp
 8001478:	1891      	adds	r1, r2, r2
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	415b      	adcs	r3, r3
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001484:	eb12 020a 	adds.w	r2, r2, sl
 8001488:	eb43 030b 	adc.w	r3, r3, fp
 800148c:	f04f 0000 	mov.w	r0, #0
 8001490:	f04f 0100 	mov.w	r1, #0
 8001494:	0199      	lsls	r1, r3, #6
 8001496:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800149a:	0190      	lsls	r0, r2, #6
 800149c:	1812      	adds	r2, r2, r0
 800149e:	eb41 0303 	adc.w	r3, r1, r3
 80014a2:	f04f 0000 	mov.w	r0, #0
 80014a6:	f04f 0100 	mov.w	r1, #0
 80014aa:	0099      	lsls	r1, r3, #2
 80014ac:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80014b0:	0090      	lsls	r0, r2, #2
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	eb12 020a 	adds.w	r2, r2, sl
 80014ba:	eb43 030b 	adc.w	r3, r3, fp
 80014be:	f04f 0000 	mov.w	r0, #0
 80014c2:	f04f 0100 	mov.w	r1, #0
 80014c6:	0099      	lsls	r1, r3, #2
 80014c8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80014cc:	0090      	lsls	r0, r2, #2
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	eb12 010a 	adds.w	r1, r2, sl
 80014d6:	6339      	str	r1, [r7, #48]	; 0x30
 80014d8:	eb43 030b 	adc.w	r3, r3, fp
 80014dc:	637b      	str	r3, [r7, #52]	; 0x34
 80014de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80014e6:	f7ff faad 	bl	8000a44 <__aeabi_ldivmod>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80014f2:	4b4c      	ldr	r3, [pc, #304]	; (8001624 <BMP280_ReadTemperatureAndPressure+0x3f0>)
 80014f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f8:	b218      	sxth	r0, r3
 80014fa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80014fe:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	0b62      	lsrs	r2, r4, #13
 800150c:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001510:	136b      	asrs	r3, r5, #13
 8001512:	fb02 f501 	mul.w	r5, r2, r1
 8001516:	fb00 f403 	mul.w	r4, r0, r3
 800151a:	442c      	add	r4, r5
 800151c:	fba0 0102 	umull	r0, r1, r0, r2
 8001520:	1863      	adds	r3, r4, r1
 8001522:	4619      	mov	r1, r3
 8001524:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	0b62      	lsrs	r2, r4, #13
 8001532:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001536:	136b      	asrs	r3, r5, #13
 8001538:	fb02 f501 	mul.w	r5, r2, r1
 800153c:	fb00 f403 	mul.w	r4, r0, r3
 8001540:	442c      	add	r4, r5
 8001542:	fba0 0102 	umull	r0, r1, r0, r2
 8001546:	1863      	adds	r3, r4, r1
 8001548:	4619      	mov	r1, r3
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	0e42      	lsrs	r2, r0, #25
 8001554:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001558:	164b      	asrs	r3, r1, #25
 800155a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	  var2 = (((int64_t)p8) * p) >> 19;
 800155e:	4b32      	ldr	r3, [pc, #200]	; (8001628 <BMP280_ReadTemperatureAndPressure+0x3f4>)
 8001560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001564:	b21a      	sxth	r2, r3
 8001566:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800156a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800156c:	fb03 f001 	mul.w	r0, r3, r1
 8001570:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001572:	fb02 f101 	mul.w	r1, r2, r1
 8001576:	1844      	adds	r4, r0, r1
 8001578:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800157a:	fba1 0102 	umull	r0, r1, r1, r2
 800157e:	1863      	adds	r3, r4, r1
 8001580:	4619      	mov	r1, r3
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	0cc2      	lsrs	r2, r0, #19
 800158c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001590:	14cb      	asrs	r3, r1, #19
 8001592:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001596:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800159a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800159e:	1884      	adds	r4, r0, r2
 80015a0:	62bc      	str	r4, [r7, #40]	; 0x28
 80015a2:	eb41 0303 	adc.w	r3, r1, r3
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80015ac:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80015b0:	4621      	mov	r1, r4
 80015b2:	1889      	adds	r1, r1, r2
 80015b4:	6239      	str	r1, [r7, #32]
 80015b6:	4629      	mov	r1, r5
 80015b8:	eb43 0101 	adc.w	r1, r3, r1
 80015bc:	6279      	str	r1, [r7, #36]	; 0x24
 80015be:	f04f 0000 	mov.w	r0, #0
 80015c2:	f04f 0100 	mov.w	r1, #0
 80015c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015ca:	4623      	mov	r3, r4
 80015cc:	0a18      	lsrs	r0, r3, #8
 80015ce:	462b      	mov	r3, r5
 80015d0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015d4:	462b      	mov	r3, r5
 80015d6:	1219      	asrs	r1, r3, #8
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <BMP280_ReadTemperatureAndPressure+0x3f8>)
 80015da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015de:	b21c      	sxth	r4, r3
 80015e0:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	012b      	lsls	r3, r5, #4
 80015ee:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80015f2:	0122      	lsls	r2, r4, #4
 80015f4:	1884      	adds	r4, r0, r2
 80015f6:	603c      	str	r4, [r7, #0]
 80015f8:	eb41 0303 	adc.w	r3, r1, r3
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001602:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	  *pressure = (int32_t)p/256;
 8001606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001608:	2b00      	cmp	r3, #0
 800160a:	da00      	bge.n	800160e <BMP280_ReadTemperatureAndPressure+0x3da>
 800160c:	33ff      	adds	r3, #255	; 0xff
 800160e:	121b      	asrs	r3, r3, #8
 8001610:	461a      	mov	r2, r3
 8001612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001614:	601a      	str	r2, [r3, #0]

	  return 0;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3770      	adds	r7, #112	; 0x70
 800161c:	46bd      	mov	sp, r7
 800161e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001622:	bf00      	nop
 8001624:	2000004a 	.word	0x2000004a
 8001628:	2000003a 	.word	0x2000003a
 800162c:	20000030 	.word	0x20000030

08001630 <calculate_discrete_pid>:
	pid_t;
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
float32_t calculate_discrete_pid(pid_t* pid, float32_t setpoint, float32_t measured){
 8001630:	b5b0      	push	{r4, r5, r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	ed87 0a02 	vstr	s0, [r7, #8]
 800163c:	edc7 0a01 	vstr	s1, [r7, #4]
	float32_t u=0, P, I, D, error, integral, derivative;
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c

	error = setpoint-measured;
 8001646:	ed97 7a02 	vldr	s14, [r7, #8]
 800164a:	edd7 7a01 	vldr	s15, [r7, #4]
 800164e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001652:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	P = pid->p.Kp * error;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001664:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	integral = pid->previous_integral + (error+pid->previous_error) ;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	ed93 7a05 	vldr	s14, [r3, #20]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	edd3 6a04 	vldr	s13, [r3, #16]
 8001674:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800167c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001680:	edc7 7a08 	vstr	s15, [r7, #32]
	pid->previous_integral = integral;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6a3a      	ldr	r2, [r7, #32]
 8001688:	615a      	str	r2, [r3, #20]
	I = pid->p.Ki*integral*(pid->p.dt/2.0);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001690:	edd7 7a08 	vldr	s15, [r7, #32]
 8001694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001698:	ee17 0a90 	vmov	r0, s15
 800169c:	f7fe ff18 	bl	80004d0 <__aeabi_f2d>
 80016a0:	4604      	mov	r4, r0
 80016a2:	460d      	mov	r5, r1
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ff11 	bl	80004d0 <__aeabi_f2d>
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016b6:	f7ff f88d 	bl	80007d4 <__aeabi_ddiv>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4620      	mov	r0, r4
 80016c0:	4629      	mov	r1, r5
 80016c2:	f7fe ff5d 	bl	8000580 <__aeabi_dmul>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f7ff f969 	bl	80009a4 <__aeabi_d2f>
 80016d2:	4603      	mov	r3, r0
 80016d4:	61fb      	str	r3, [r7, #28]

	derivative = (error - pid->previous_error)/pid->p.dt;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80016dc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80016e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80016ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ee:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->previous_error = error;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016f6:	611a      	str	r2, [r3, #16]
	D = pid->p.Kd*derivative;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80016fe:	ed97 7a06 	vldr	s14, [r7, #24]
 8001702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001706:	edc7 7a05 	vstr	s15, [r7, #20]

	u = P  + I + D;
 800170a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800170e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001716:	ed97 7a05 	vldr	s14, [r7, #20]
 800171a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	return u;
 8001722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001724:	ee07 3a90 	vmov	s15, r3
}
 8001728:	eeb0 0a67 	vmov.f32	s0, s15
 800172c:	3730      	adds	r7, #48	; 0x30
 800172e:	46bd      	mov	sp, r7
 8001730:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001734:	b5b0      	push	{r4, r5, r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	    pid_t pid1 = { .p.Kp=0.3, .p.Ki=0.000365, .p.Kd=3, .p.dt=10, .previous_error=0, .previous_integral=0};
 800173a:	4b52      	ldr	r3, [pc, #328]	; (8001884 <main+0x150>)
 800173c:	1d3c      	adds	r4, r7, #4
 800173e:	461d      	mov	r5, r3
 8001740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001744:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001748:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800174c:	f000 fd3f 	bl	80021ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001750:	f000 f8ae 	bl	80018b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001754:	f000 fa28 	bl	8001ba8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001758:	f000 f9c8 	bl	8001aec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800175c:	f000 f9f6 	bl	8001b4c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8001760:	f000 f90e 	bl	8001980 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001764:	f000 f94a 	bl	80019fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  	  BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001768:	2301      	movs	r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	2101      	movs	r1, #1
 800176e:	4846      	ldr	r0, [pc, #280]	; (8001888 <main+0x154>)
 8001770:	f7ff fc08 	bl	8000f84 <BMP280_Init>
  	  HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 8001774:	2100      	movs	r1, #0
 8001776:	4845      	ldr	r0, [pc, #276]	; (800188c <main+0x158>)
 8001778:	f002 ff42 	bl	8004600 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 800177c:	4944      	ldr	r1, [pc, #272]	; (8001890 <main+0x15c>)
 800177e:	4845      	ldr	r0, [pc, #276]	; (8001894 <main+0x160>)
 8001780:	f7ff fd58 	bl	8001234 <BMP280_ReadTemperatureAndPressure>
	  HAL_Delay(1000);
 8001784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001788:	f000 fd7e 	bl	8002288 <HAL_Delay>

	  float32_t setpoint = 35.0;
 800178c:	4b42      	ldr	r3, [pc, #264]	; (8001898 <main+0x164>)
 800178e:	61fb      	str	r3, [r7, #28]


	  pulse_pid = calculate_discrete_pid(&pid1, setpoint, temperature);
 8001790:	4b40      	ldr	r3, [pc, #256]	; (8001894 <main+0x160>)
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	eef0 0a67 	vmov.f32	s1, s15
 800179c:	ed97 0a07 	vldr	s0, [r7, #28]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff45 	bl	8001630 <calculate_discrete_pid>
 80017a6:	eef0 7a40 	vmov.f32	s15, s0
 80017aa:	4b3c      	ldr	r3, [pc, #240]	; (800189c <main+0x168>)
 80017ac:	edc3 7a00 	vstr	s15, [r3]
	  ograniczenie = (setpoint-temperature)/pulse_pid;
 80017b0:	4b38      	ldr	r3, [pc, #224]	; (8001894 <main+0x160>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80017ba:	ee77 6a67 	vsub.f32	s13, s14, s15
 80017be:	4b37      	ldr	r3, [pc, #220]	; (800189c <main+0x168>)
 80017c0:	ed93 7a00 	vldr	s14, [r3]
 80017c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c8:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <main+0x16c>)
 80017ca:	edc3 7a00 	vstr	s15, [r3]

	  if(ograniczenie < 0)
 80017ce:	4b34      	ldr	r3, [pc, #208]	; (80018a0 <main+0x16c>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017dc:	d507      	bpl.n	80017ee <main+0xba>
	  {
		  ograniczenie=-ograniczenie;
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <main+0x16c>)
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	eef1 7a67 	vneg.f32	s15, s15
 80017e8:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <main+0x16c>)
 80017ea:	edc3 7a00 	vstr	s15, [r3]
	  }



	  if(pulse_pid>ograniczenie){
 80017ee:	4b2b      	ldr	r3, [pc, #172]	; (800189c <main+0x168>)
 80017f0:	ed93 7a00 	vldr	s14, [r3]
 80017f4:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <main+0x16c>)
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	dd03      	ble.n	800180c <main+0xd8>
		  pwm = 10000;
 8001804:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <main+0x170>)
 8001806:	4a28      	ldr	r2, [pc, #160]	; (80018a8 <main+0x174>)
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	e030      	b.n	800186e <main+0x13a>
	  }
	  else if(ograniczenie == 0 )
 800180c:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <main+0x16c>)
 800180e:	edd3 7a00 	vldr	s15, [r3]
 8001812:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	d114      	bne.n	8001846 <main+0x112>
	  {
		  pwm = 1000*pulse_pid;
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <main+0x168>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80018ac <main+0x178>
 8001826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <main+0x170>)
 800182c:	edc3 7a00 	vstr	s15, [r3]
		  pwm=1000+pwm;
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <main+0x170>)
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80018ac <main+0x178>
 800183a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800183e:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <main+0x170>)
 8001840:	edc3 7a00 	vstr	s15, [r3]
 8001844:	e013      	b.n	800186e <main+0x13a>
	  }
	  else
	  {
		  pwm = 1000*pulse_pid;
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <main+0x168>)
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80018ac <main+0x178>
 8001850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <main+0x170>)
 8001856:	edc3 7a00 	vstr	s15, [r3]
		  pwm=1000+pwm;
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <main+0x170>)
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80018ac <main+0x178>
 8001864:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <main+0x170>)
 800186a:	edc3 7a00 	vstr	s15, [r3]
	  }


	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <main+0x170>)
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <main+0x158>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800187c:	ee17 2a90 	vmov	r2, s15
 8001880:	635a      	str	r2, [r3, #52]	; 0x34
  {
 8001882:	e77b      	b.n	800177c <main+0x48>
 8001884:	08006328 	.word	0x08006328
 8001888:	20000534 	.word	0x20000534
 800188c:	200004e0 	.word	0x200004e0
 8001890:	2000052c 	.word	0x2000052c
 8001894:	200004dc 	.word	0x200004dc
 8001898:	420c0000 	.word	0x420c0000
 800189c:	20000028 	.word	0x20000028
 80018a0:	20000598 	.word	0x20000598
 80018a4:	20000530 	.word	0x20000530
 80018a8:	461c4000 	.word	0x461c4000
 80018ac:	447a0000 	.word	0x447a0000

080018b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b094      	sub	sp, #80	; 0x50
 80018b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	2230      	movs	r2, #48	; 0x30
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f004 fd1e 	bl	8006300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018d4:	f001 f8f0 	bl	8002ab8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d8:	4b27      	ldr	r3, [pc, #156]	; (8001978 <SystemClock_Config+0xc8>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	4a26      	ldr	r2, [pc, #152]	; (8001978 <SystemClock_Config+0xc8>)
 80018de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e2:	6413      	str	r3, [r2, #64]	; 0x40
 80018e4:	4b24      	ldr	r3, [pc, #144]	; (8001978 <SystemClock_Config+0xc8>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018f0:	4b22      	ldr	r3, [pc, #136]	; (800197c <SystemClock_Config+0xcc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018f8:	4a20      	ldr	r2, [pc, #128]	; (800197c <SystemClock_Config+0xcc>)
 80018fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <SystemClock_Config+0xcc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800190c:	2301      	movs	r3, #1
 800190e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001910:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001916:	2302      	movs	r3, #2
 8001918:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800191a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001920:	2304      	movs	r3, #4
 8001922:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001924:	2348      	movs	r3, #72	; 0x48
 8001926:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001928:	2302      	movs	r3, #2
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800192c:	2303      	movs	r3, #3
 800192e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001930:	f107 0320 	add.w	r3, r7, #32
 8001934:	4618      	mov	r0, r3
 8001936:	f001 f8cf 	bl	8002ad8 <HAL_RCC_OscConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001940:	f000 fa22 	bl	8001d88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001944:	230f      	movs	r3, #15
 8001946:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001948:	2302      	movs	r3, #2
 800194a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001954:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	2102      	movs	r1, #2
 8001960:	4618      	mov	r0, r3
 8001962:	f001 fb5d 	bl	8003020 <HAL_RCC_ClockConfig>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800196c:	f000 fa0c 	bl	8001d88 <Error_Handler>
  }
}
 8001970:	bf00      	nop
 8001972:	3750      	adds	r7, #80	; 0x50
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	40007000 	.word	0x40007000

08001980 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <MX_SPI1_Init+0x74>)
 8001986:	4a1c      	ldr	r2, [pc, #112]	; (80019f8 <MX_SPI1_Init+0x78>)
 8001988:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800198a:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <MX_SPI1_Init+0x74>)
 800198c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001990:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <MX_SPI1_Init+0x74>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001998:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <MX_SPI1_Init+0x74>)
 800199a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800199e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <MX_SPI1_Init+0x74>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <MX_SPI1_Init+0x74>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_SPI1_Init+0x74>)
 80019ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_SPI1_Init+0x74>)
 80019b6:	2210      	movs	r2, #16
 80019b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_SPI1_Init+0x74>)
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_SPI1_Init+0x74>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <MX_SPI1_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_SPI1_Init+0x74>)
 80019ce:	2207      	movs	r2, #7
 80019d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <MX_SPI1_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_SPI1_Init+0x74>)
 80019da:	2208      	movs	r2, #8
 80019dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <MX_SPI1_Init+0x74>)
 80019e0:	f002 f910 	bl	8003c04 <HAL_SPI_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019ea:	f000 f9cd 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000534 	.word	0x20000534
 80019f8:	40013000 	.word	0x40013000

080019fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08e      	sub	sp, #56	; 0x38
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	615a      	str	r2, [r3, #20]
 8001a2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <MX_TIM3_Init+0xe8>)
 8001a30:	4a2d      	ldr	r2, [pc, #180]	; (8001ae8 <MX_TIM3_Init+0xec>)
 8001a32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001a34:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <MX_TIM3_Init+0xe8>)
 8001a36:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001a3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3c:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <MX_TIM3_Init+0xe8>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001a42:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <MX_TIM3_Init+0xe8>)
 8001a44:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <MX_TIM3_Init+0xe8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <MX_TIM3_Init+0xe8>)
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a56:	4823      	ldr	r0, [pc, #140]	; (8001ae4 <MX_TIM3_Init+0xe8>)
 8001a58:	f002 fd1a 	bl	8004490 <HAL_TIM_Base_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001a62:	f000 f991 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a70:	4619      	mov	r1, r3
 8001a72:	481c      	ldr	r0, [pc, #112]	; (8001ae4 <MX_TIM3_Init+0xe8>)
 8001a74:	f002 ffd2 	bl	8004a1c <HAL_TIM_ConfigClockSource>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001a7e:	f000 f983 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a82:	4818      	ldr	r0, [pc, #96]	; (8001ae4 <MX_TIM3_Init+0xe8>)
 8001a84:	f002 fd5b 	bl	800453e <HAL_TIM_PWM_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001a8e:	f000 f97b 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4810      	ldr	r0, [pc, #64]	; (8001ae4 <MX_TIM3_Init+0xe8>)
 8001aa2:	f003 fc43 	bl	800532c <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001aac:	f000 f96c 	bl	8001d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab0:	2360      	movs	r3, #96	; 0x60
 8001ab2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <MX_TIM3_Init+0xe8>)
 8001ac8:	f002 fe94 	bl	80047f4 <HAL_TIM_PWM_ConfigChannel>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001ad2:	f000 f959 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ad6:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <MX_TIM3_Init+0xe8>)
 8001ad8:	f000 fa02 	bl	8001ee0 <HAL_TIM_MspPostInit>

}
 8001adc:	bf00      	nop
 8001ade:	3738      	adds	r7, #56	; 0x38
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200004e0 	.word	0x200004e0
 8001ae8:	40000400 	.word	0x40000400

08001aec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001af0:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <MX_USART3_UART_Init+0x58>)
 8001af2:	4a15      	ldr	r2, [pc, #84]	; (8001b48 <MX_USART3_UART_Init+0x5c>)
 8001af4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <MX_USART3_UART_Init+0x58>)
 8001af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001afc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_USART3_UART_Init+0x58>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_USART3_UART_Init+0x58>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_USART3_UART_Init+0x58>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_USART3_UART_Init+0x58>)
 8001b12:	220c      	movs	r2, #12
 8001b14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <MX_USART3_UART_Init+0x58>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_USART3_UART_Init+0x58>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <MX_USART3_UART_Init+0x58>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_USART3_UART_Init+0x58>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_USART3_UART_Init+0x58>)
 8001b30:	f003 fc8a 	bl	8005448 <HAL_UART_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b3a:	f000 f925 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000054 	.word	0x20000054
 8001b48:	40004800 	.word	0x40004800

08001b4c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b5a:	2206      	movs	r2, #6
 8001b5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b60:	2202      	movs	r2, #2
 8001b62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b90:	f000 fe49 	bl	8002826 <HAL_PCD_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001b9a:	f000 f8f5 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200000d8 	.word	0x200000d8

08001ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	; 0x30
 8001bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	4b6d      	ldr	r3, [pc, #436]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a6c      	ldr	r2, [pc, #432]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b6a      	ldr	r3, [pc, #424]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd6:	4b67      	ldr	r3, [pc, #412]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a66      	ldr	r2, [pc, #408]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b64      	ldr	r3, [pc, #400]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a60      	ldr	r2, [pc, #384]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b5e      	ldr	r3, [pc, #376]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c06:	4b5b      	ldr	r3, [pc, #364]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a5a      	ldr	r2, [pc, #360]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b58      	ldr	r3, [pc, #352]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c1e:	4b55      	ldr	r3, [pc, #340]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a54      	ldr	r2, [pc, #336]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001c24:	f043 0308 	orr.w	r3, r3, #8
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b52      	ldr	r3, [pc, #328]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c36:	4b4f      	ldr	r3, [pc, #316]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a4e      	ldr	r2, [pc, #312]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <MX_GPIO_Init+0x1cc>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2110      	movs	r1, #16
 8001c52:	4849      	ldr	r0, [pc, #292]	; (8001d78 <MX_GPIO_Init+0x1d0>)
 8001c54:	f000 fdce 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2140      	movs	r1, #64	; 0x40
 8001c5c:	4847      	ldr	r0, [pc, #284]	; (8001d7c <MX_GPIO_Init+0x1d4>)
 8001c5e:	f000 fdc9 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001c62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	4841      	ldr	r0, [pc, #260]	; (8001d80 <MX_GPIO_Init+0x1d8>)
 8001c7a:	f000 fc0f 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c7e:	2332      	movs	r3, #50	; 0x32
 8001c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c8e:	230b      	movs	r3, #11
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	4619      	mov	r1, r3
 8001c98:	4839      	ldr	r0, [pc, #228]	; (8001d80 <MX_GPIO_Init+0x1d8>)
 8001c9a:	f000 fbff 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001c9e:	2386      	movs	r3, #134	; 0x86
 8001ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cae:	230b      	movs	r3, #11
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	482f      	ldr	r0, [pc, #188]	; (8001d78 <MX_GPIO_Init+0x1d0>)
 8001cba:	f000 fbef 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cbe:	2310      	movs	r3, #16
 8001cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4828      	ldr	r0, [pc, #160]	; (8001d78 <MX_GPIO_Init+0x1d0>)
 8001cd6:	f000 fbe1 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin Led1_Pin LD2_Pin */
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	f107 031c 	add.w	r3, r7, #28
 8001cea:	4619      	mov	r1, r3
 8001cec:	4825      	ldr	r0, [pc, #148]	; (8001d84 <MX_GPIO_Init+0x1dc>)
 8001cee:	f000 fbd5 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001cf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d04:	230b      	movs	r3, #11
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	481d      	ldr	r0, [pc, #116]	; (8001d84 <MX_GPIO_Init+0x1dc>)
 8001d10:	f000 fbc4 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001d14:	2340      	movs	r3, #64	; 0x40
 8001d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d24:	f107 031c 	add.w	r3, r7, #28
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4814      	ldr	r0, [pc, #80]	; (8001d7c <MX_GPIO_Init+0x1d4>)
 8001d2c:	f000 fbb6 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d3c:	f107 031c 	add.w	r3, r7, #28
 8001d40:	4619      	mov	r1, r3
 8001d42:	480e      	ldr	r0, [pc, #56]	; (8001d7c <MX_GPIO_Init+0x1d4>)
 8001d44:	f000 fbaa 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001d48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d5a:	230b      	movs	r3, #11
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d5e:	f107 031c 	add.w	r3, r7, #28
 8001d62:	4619      	mov	r1, r3
 8001d64:	4805      	ldr	r0, [pc, #20]	; (8001d7c <MX_GPIO_Init+0x1d4>)
 8001d66:	f000 fb99 	bl	800249c <HAL_GPIO_Init>

}
 8001d6a:	bf00      	nop
 8001d6c:	3730      	adds	r7, #48	; 0x30
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40021800 	.word	0x40021800
 8001d80:	40020800 	.word	0x40020800
 8001d84:	40020400 	.word	0x40020400

08001d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d8c:	b672      	cpsid	i
}
 8001d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <Error_Handler+0x8>
	...

08001d94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <HAL_MspInit+0x44>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <HAL_MspInit+0x44>)
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_MspInit+0x44>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_MspInit+0x44>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <HAL_MspInit+0x44>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_MspInit+0x44>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800

08001ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a25      	ldr	r2, [pc, #148]	; (8001e90 <HAL_SPI_MspInit+0xb4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d143      	bne.n	8001e86 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <HAL_SPI_MspInit+0xb8>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a24      	ldr	r2, [pc, #144]	; (8001e94 <HAL_SPI_MspInit+0xb8>)
 8001e04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <HAL_SPI_MspInit+0xb8>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <HAL_SPI_MspInit+0xb8>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <HAL_SPI_MspInit+0xb8>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <HAL_SPI_MspInit+0xb8>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_SPI_MspInit+0xb8>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <HAL_SPI_MspInit+0xb8>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <HAL_SPI_MspInit+0xb8>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e46:	2320      	movs	r3, #32
 8001e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e56:	2305      	movs	r3, #5
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	480d      	ldr	r0, [pc, #52]	; (8001e98 <HAL_SPI_MspInit+0xbc>)
 8001e62:	f000 fb1b 	bl	800249c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e66:	2330      	movs	r3, #48	; 0x30
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e76:	2305      	movs	r3, #5
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4806      	ldr	r0, [pc, #24]	; (8001e9c <HAL_SPI_MspInit+0xc0>)
 8001e82:	f000 fb0b 	bl	800249c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	; 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40013000 	.word	0x40013000
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	40020400 	.word	0x40020400

08001ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <HAL_TIM_Base_MspInit+0x38>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d10b      	bne.n	8001eca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_TIM_Base_MspInit+0x3c>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a09      	ldr	r2, [pc, #36]	; (8001edc <HAL_TIM_Base_MspInit+0x3c>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_TIM_Base_MspInit+0x3c>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	40023800 	.word	0x40023800

08001ee0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a11      	ldr	r2, [pc, #68]	; (8001f44 <HAL_TIM_MspPostInit+0x64>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d11b      	bne.n	8001f3a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_TIM_MspPostInit+0x68>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a10      	ldr	r2, [pc, #64]	; (8001f48 <HAL_TIM_MspPostInit+0x68>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_TIM_MspPostInit+0x68>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f1a:	2340      	movs	r3, #64	; 0x40
 8001f1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2e:	f107 030c 	add.w	r3, r7, #12
 8001f32:	4619      	mov	r1, r3
 8001f34:	4805      	ldr	r0, [pc, #20]	; (8001f4c <HAL_TIM_MspPostInit+0x6c>)
 8001f36:	f000 fab1 	bl	800249c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f3a:	bf00      	nop
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40000400 	.word	0x40000400
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020000 	.word	0x40020000

08001f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b0aa      	sub	sp, #168	; 0xa8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f68:	f107 0310 	add.w	r3, r7, #16
 8001f6c:	2284      	movs	r2, #132	; 0x84
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f004 f9c5 	bl	8006300 <memset>
  if(huart->Instance==USART3)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a22      	ldr	r2, [pc, #136]	; (8002004 <HAL_UART_MspInit+0xb4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d13c      	bne.n	8001ffa <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f84:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f8a:	f107 0310 	add.w	r3, r7, #16
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 fa48 	bl	8003424 <HAL_RCCEx_PeriphCLKConfig>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f9a:	f7ff fef5 	bl	8001d88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <HAL_UART_MspInit+0xb8>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a19      	ldr	r2, [pc, #100]	; (8002008 <HAL_UART_MspInit+0xb8>)
 8001fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_UART_MspInit+0xb8>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb6:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_UART_MspInit+0xb8>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a13      	ldr	r2, [pc, #76]	; (8002008 <HAL_UART_MspInit+0xb8>)
 8001fbc:	f043 0308 	orr.w	r3, r3, #8
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_UART_MspInit+0xb8>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001fce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fe8:	2307      	movs	r3, #7
 8001fea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4805      	ldr	r0, [pc, #20]	; (800200c <HAL_UART_MspInit+0xbc>)
 8001ff6:	f000 fa51 	bl	800249c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ffa:	bf00      	nop
 8001ffc:	37a8      	adds	r7, #168	; 0xa8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40004800 	.word	0x40004800
 8002008:	40023800 	.word	0x40023800
 800200c:	40020c00 	.word	0x40020c00

08002010 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b0ac      	sub	sp, #176	; 0xb0
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002028:	f107 0318 	add.w	r3, r7, #24
 800202c:	2284      	movs	r2, #132	; 0x84
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f004 f965 	bl	8006300 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800203e:	d159      	bne.n	80020f4 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002040:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002044:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800204c:	f107 0318 	add.w	r3, r7, #24
 8002050:	4618      	mov	r0, r3
 8002052:	f001 f9e7 	bl	8003424 <HAL_RCCEx_PeriphCLKConfig>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800205c:	f7ff fe94 	bl	8001d88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002060:	4b26      	ldr	r3, [pc, #152]	; (80020fc <HAL_PCD_MspInit+0xec>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	4a25      	ldr	r2, [pc, #148]	; (80020fc <HAL_PCD_MspInit+0xec>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6313      	str	r3, [r2, #48]	; 0x30
 800206c:	4b23      	ldr	r3, [pc, #140]	; (80020fc <HAL_PCD_MspInit+0xec>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002078:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800207c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002092:	230a      	movs	r3, #10
 8002094:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800209c:	4619      	mov	r1, r3
 800209e:	4818      	ldr	r0, [pc, #96]	; (8002100 <HAL_PCD_MspInit+0xf0>)
 80020a0:	f000 f9fc 	bl	800249c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80020a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020bc:	4619      	mov	r1, r3
 80020be:	4810      	ldr	r0, [pc, #64]	; (8002100 <HAL_PCD_MspInit+0xf0>)
 80020c0:	f000 f9ec 	bl	800249c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <HAL_PCD_MspInit+0xec>)
 80020c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c8:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <HAL_PCD_MspInit+0xec>)
 80020ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ce:	6353      	str	r3, [r2, #52]	; 0x34
 80020d0:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_PCD_MspInit+0xec>)
 80020d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4b07      	ldr	r3, [pc, #28]	; (80020fc <HAL_PCD_MspInit+0xec>)
 80020de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e0:	4a06      	ldr	r2, [pc, #24]	; (80020fc <HAL_PCD_MspInit+0xec>)
 80020e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e6:	6453      	str	r3, [r2, #68]	; 0x44
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <HAL_PCD_MspInit+0xec>)
 80020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80020f4:	bf00      	nop
 80020f6:	37b0      	adds	r7, #176	; 0xb0
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000

08002104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <NMI_Handler+0x4>

0800210a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210e:	e7fe      	b.n	800210e <HardFault_Handler+0x4>

08002110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <MemManage_Handler+0x4>

08002116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800211a:	e7fe      	b.n	800211a <BusFault_Handler+0x4>

0800211c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <UsageFault_Handler+0x4>

08002122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002150:	f000 f87a 	bl	8002248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}

08002158 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <SystemInit+0x20>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <SystemInit+0x20>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800217c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002180:	480d      	ldr	r0, [pc, #52]	; (80021b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002182:	490e      	ldr	r1, [pc, #56]	; (80021bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002184:	4a0e      	ldr	r2, [pc, #56]	; (80021c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002198:	4c0b      	ldr	r4, [pc, #44]	; (80021c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021a6:	f7ff ffd7 	bl	8002158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021aa:	f004 f885 	bl	80062b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ae:	f7ff fac1 	bl	8001734 <main>
  bx  lr    
 80021b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80021b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80021c0:	08006368 	.word	0x08006368
  ldr r2, =_sbss
 80021c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80021c8:	20000638 	.word	0x20000638

080021cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC_IRQHandler>

080021ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d2:	2003      	movs	r0, #3
 80021d4:	f000 f92e 	bl	8002434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d8:	2000      	movs	r0, #0
 80021da:	f000 f805 	bl	80021e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021de:	f7ff fdd9 	bl	8001d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_InitTick+0x54>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_InitTick+0x58>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f93b 	bl	8002482 <HAL_SYSTICK_Config>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e00e      	b.n	8002234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b0f      	cmp	r3, #15
 800221a:	d80a      	bhi.n	8002232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221c:	2200      	movs	r2, #0
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f000 f911 	bl	800244a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002228:	4a06      	ldr	r2, [pc, #24]	; (8002244 <HAL_InitTick+0x5c>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000000 	.word	0x20000000
 8002240:	20000008 	.word	0x20000008
 8002244:	20000004 	.word	0x20000004

08002248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_IncTick+0x20>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_IncTick+0x24>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4413      	add	r3, r2
 8002258:	4a04      	ldr	r2, [pc, #16]	; (800226c <HAL_IncTick+0x24>)
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000008 	.word	0x20000008
 800226c:	20000634 	.word	0x20000634

08002270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return uwTick;
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_GetTick+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000634 	.word	0x20000634

08002288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff ffee 	bl	8002270 <HAL_GetTick>
 8002294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d005      	beq.n	80022ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_Delay+0x44>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ae:	bf00      	nop
 80022b0:	f7ff ffde 	bl	8002270 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d8f7      	bhi.n	80022b0 <HAL_Delay+0x28>
  {
  }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000008 	.word	0x20000008

080022d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <__NVIC_SetPriorityGrouping+0x40>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022ec:	4013      	ands	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fe:	4a04      	ldr	r2, [pc, #16]	; (8002310 <__NVIC_SetPriorityGrouping+0x40>)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	60d3      	str	r3, [r2, #12]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00
 8002314:	05fa0000 	.word	0x05fa0000

08002318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <__NVIC_GetPriorityGrouping+0x18>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	f003 0307 	and.w	r3, r3, #7
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db0a      	blt.n	800235e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	490c      	ldr	r1, [pc, #48]	; (8002380 <__NVIC_SetPriority+0x4c>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	0112      	lsls	r2, r2, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	440b      	add	r3, r1
 8002358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800235c:	e00a      	b.n	8002374 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4908      	ldr	r1, [pc, #32]	; (8002384 <__NVIC_SetPriority+0x50>)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3b04      	subs	r3, #4
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	440b      	add	r3, r1
 8002372:	761a      	strb	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000e100 	.word	0xe000e100
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f1c3 0307 	rsb	r3, r3, #7
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	bf28      	it	cs
 80023a6:	2304      	movcs	r3, #4
 80023a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d902      	bls.n	80023b8 <NVIC_EncodePriority+0x30>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3b03      	subs	r3, #3
 80023b6:	e000      	b.n	80023ba <NVIC_EncodePriority+0x32>
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	401a      	ands	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	43d9      	mvns	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	4313      	orrs	r3, r2
         );
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002400:	d301      	bcc.n	8002406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002402:	2301      	movs	r3, #1
 8002404:	e00f      	b.n	8002426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002406:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <SysTick_Config+0x40>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240e:	210f      	movs	r1, #15
 8002410:	f04f 30ff 	mov.w	r0, #4294967295
 8002414:	f7ff ff8e 	bl	8002334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <SysTick_Config+0x40>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241e:	4b04      	ldr	r3, [pc, #16]	; (8002430 <SysTick_Config+0x40>)
 8002420:	2207      	movs	r2, #7
 8002422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	e000e010 	.word	0xe000e010

08002434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff ff47 	bl	80022d0 <__NVIC_SetPriorityGrouping>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800245c:	f7ff ff5c 	bl	8002318 <__NVIC_GetPriorityGrouping>
 8002460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	6978      	ldr	r0, [r7, #20]
 8002468:	f7ff ff8e 	bl	8002388 <NVIC_EncodePriority>
 800246c:	4602      	mov	r2, r0
 800246e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff5d 	bl	8002334 <__NVIC_SetPriority>
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffb0 	bl	80023f0 <SysTick_Config>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	; 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	e175      	b.n	80027a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024bc:	2201      	movs	r2, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	f040 8164 	bne.w	80027a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d005      	beq.n	80024f2 <HAL_GPIO_Init+0x56>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d130      	bne.n	8002554 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	2203      	movs	r2, #3
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002528:	2201      	movs	r2, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 0201 	and.w	r2, r3, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b03      	cmp	r3, #3
 800255e:	d017      	beq.n	8002590 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d123      	bne.n	80025e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	08da      	lsrs	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3208      	adds	r2, #8
 80025a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	220f      	movs	r2, #15
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	08da      	lsrs	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3208      	adds	r2, #8
 80025de:	69b9      	ldr	r1, [r7, #24]
 80025e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0203 	and.w	r2, r3, #3
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80be 	beq.w	80027a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002626:	4b66      	ldr	r3, [pc, #408]	; (80027c0 <HAL_GPIO_Init+0x324>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	4a65      	ldr	r2, [pc, #404]	; (80027c0 <HAL_GPIO_Init+0x324>)
 800262c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002630:	6453      	str	r3, [r2, #68]	; 0x44
 8002632:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <HAL_GPIO_Init+0x324>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800263e:	4a61      	ldr	r2, [pc, #388]	; (80027c4 <HAL_GPIO_Init+0x328>)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3302      	adds	r3, #2
 8002646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	220f      	movs	r2, #15
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a58      	ldr	r2, [pc, #352]	; (80027c8 <HAL_GPIO_Init+0x32c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d037      	beq.n	80026da <HAL_GPIO_Init+0x23e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a57      	ldr	r2, [pc, #348]	; (80027cc <HAL_GPIO_Init+0x330>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d031      	beq.n	80026d6 <HAL_GPIO_Init+0x23a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a56      	ldr	r2, [pc, #344]	; (80027d0 <HAL_GPIO_Init+0x334>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d02b      	beq.n	80026d2 <HAL_GPIO_Init+0x236>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a55      	ldr	r2, [pc, #340]	; (80027d4 <HAL_GPIO_Init+0x338>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d025      	beq.n	80026ce <HAL_GPIO_Init+0x232>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a54      	ldr	r2, [pc, #336]	; (80027d8 <HAL_GPIO_Init+0x33c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01f      	beq.n	80026ca <HAL_GPIO_Init+0x22e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a53      	ldr	r2, [pc, #332]	; (80027dc <HAL_GPIO_Init+0x340>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d019      	beq.n	80026c6 <HAL_GPIO_Init+0x22a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a52      	ldr	r2, [pc, #328]	; (80027e0 <HAL_GPIO_Init+0x344>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <HAL_GPIO_Init+0x226>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a51      	ldr	r2, [pc, #324]	; (80027e4 <HAL_GPIO_Init+0x348>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00d      	beq.n	80026be <HAL_GPIO_Init+0x222>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a50      	ldr	r2, [pc, #320]	; (80027e8 <HAL_GPIO_Init+0x34c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d007      	beq.n	80026ba <HAL_GPIO_Init+0x21e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4f      	ldr	r2, [pc, #316]	; (80027ec <HAL_GPIO_Init+0x350>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d101      	bne.n	80026b6 <HAL_GPIO_Init+0x21a>
 80026b2:	2309      	movs	r3, #9
 80026b4:	e012      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026b6:	230a      	movs	r3, #10
 80026b8:	e010      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026ba:	2308      	movs	r3, #8
 80026bc:	e00e      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026be:	2307      	movs	r3, #7
 80026c0:	e00c      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026c2:	2306      	movs	r3, #6
 80026c4:	e00a      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026c6:	2305      	movs	r3, #5
 80026c8:	e008      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026ca:	2304      	movs	r3, #4
 80026cc:	e006      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026ce:	2303      	movs	r3, #3
 80026d0:	e004      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e002      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <HAL_GPIO_Init+0x240>
 80026da:	2300      	movs	r3, #0
 80026dc:	69fa      	ldr	r2, [r7, #28]
 80026de:	f002 0203 	and.w	r2, r2, #3
 80026e2:	0092      	lsls	r2, r2, #2
 80026e4:	4093      	lsls	r3, r2
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026ec:	4935      	ldr	r1, [pc, #212]	; (80027c4 <HAL_GPIO_Init+0x328>)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	089b      	lsrs	r3, r3, #2
 80026f2:	3302      	adds	r3, #2
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fa:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <HAL_GPIO_Init+0x354>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800271e:	4a34      	ldr	r2, [pc, #208]	; (80027f0 <HAL_GPIO_Init+0x354>)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002724:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <HAL_GPIO_Init+0x354>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002748:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <HAL_GPIO_Init+0x354>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800274e:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <HAL_GPIO_Init+0x354>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002772:	4a1f      	ldr	r2, [pc, #124]	; (80027f0 <HAL_GPIO_Init+0x354>)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_GPIO_Init+0x354>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800279c:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <HAL_GPIO_Init+0x354>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3301      	adds	r3, #1
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	2b0f      	cmp	r3, #15
 80027ac:	f67f ae86 	bls.w	80024bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40013800 	.word	0x40013800
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40020400 	.word	0x40020400
 80027d0:	40020800 	.word	0x40020800
 80027d4:	40020c00 	.word	0x40020c00
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40021400 	.word	0x40021400
 80027e0:	40021800 	.word	0x40021800
 80027e4:	40021c00 	.word	0x40021c00
 80027e8:	40022000 	.word	0x40022000
 80027ec:	40022400 	.word	0x40022400
 80027f0:	40013c00 	.word	0x40013c00

080027f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
 8002800:	4613      	mov	r3, r2
 8002802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002804:	787b      	ldrb	r3, [r7, #1]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002810:	e003      	b.n	800281a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	041a      	lsls	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	619a      	str	r2, [r3, #24]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002826:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002828:	b08f      	sub	sp, #60	; 0x3c
 800282a:	af0a      	add	r7, sp, #40	; 0x28
 800282c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e116      	b.n	8002a66 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff fbdc 	bl	8002010 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2203      	movs	r2, #3
 800285c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f003 fa88 	bl	8005d8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	687e      	ldr	r6, [r7, #4]
 8002884:	466d      	mov	r5, sp
 8002886:	f106 0410 	add.w	r4, r6, #16
 800288a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800288c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800288e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002892:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002896:	e885 0003 	stmia.w	r5, {r0, r1}
 800289a:	1d33      	adds	r3, r6, #4
 800289c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800289e:	6838      	ldr	r0, [r7, #0]
 80028a0:	f003 fa1c 	bl	8005cdc <USB_CoreInit>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e0d7      	b.n	8002a66 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 fa76 	bl	8005dae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	e04a      	b.n	800295e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	333d      	adds	r3, #61	; 0x3d
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	333c      	adds	r3, #60	; 0x3c
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	b298      	uxth	r0, r3
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	3342      	adds	r3, #66	; 0x42
 8002904:	4602      	mov	r2, r0
 8002906:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002908:	7bfa      	ldrb	r2, [r7, #15]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	333f      	adds	r3, #63	; 0x3f
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	3344      	adds	r3, #68	; 0x44
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002930:	7bfa      	ldrb	r2, [r7, #15]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	3348      	adds	r3, #72	; 0x48
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3350      	adds	r3, #80	; 0x50
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	3301      	adds	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	429a      	cmp	r2, r3
 8002966:	d3af      	bcc.n	80028c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]
 800296c:	e044      	b.n	80029f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029b0:	7bfa      	ldrb	r2, [r7, #15]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	3301      	adds	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d3b5      	bcc.n	800296e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	687e      	ldr	r6, [r7, #4]
 8002a0a:	466d      	mov	r5, sp
 8002a0c:	f106 0410 	add.w	r4, r6, #16
 8002a10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a20:	1d33      	adds	r3, r6, #4
 8002a22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a24:	6838      	ldr	r0, [r7, #0]
 8002a26:	f003 fa0f 	bl	8005e48 <USB_DevInit>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e014      	b.n	8002a66 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d102      	bne.n	8002a5a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f80b 	bl	8002a70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f003 fbc9 	bl	80061f6 <USB_DevDisconnect>

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	10000003 	.word	0x10000003

08002ab8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac6:	6013      	str	r3, [r2, #0]
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40007000 	.word	0x40007000

08002ad8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e291      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8087 	beq.w	8002c0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002afc:	4b96      	ldr	r3, [pc, #600]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d00c      	beq.n	8002b22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b08:	4b93      	ldr	r3, [pc, #588]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d112      	bne.n	8002b3a <HAL_RCC_OscConfig+0x62>
 8002b14:	4b90      	ldr	r3, [pc, #576]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b20:	d10b      	bne.n	8002b3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b22:	4b8d      	ldr	r3, [pc, #564]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d06c      	beq.n	8002c08 <HAL_RCC_OscConfig+0x130>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d168      	bne.n	8002c08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e26b      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x7a>
 8002b44:	4b84      	ldr	r3, [pc, #528]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a83      	ldr	r2, [pc, #524]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	e02e      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd8>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x9c>
 8002b5a:	4b7f      	ldr	r3, [pc, #508]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a7e      	ldr	r2, [pc, #504]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b7c      	ldr	r3, [pc, #496]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a7b      	ldr	r2, [pc, #492]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e01d      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd8>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0xc0>
 8002b7e:	4b76      	ldr	r3, [pc, #472]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a75      	ldr	r2, [pc, #468]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b73      	ldr	r3, [pc, #460]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a72      	ldr	r2, [pc, #456]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd8>
 8002b98:	4b6f      	ldr	r3, [pc, #444]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a6e      	ldr	r2, [pc, #440]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	4b6c      	ldr	r3, [pc, #432]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a6b      	ldr	r2, [pc, #428]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d013      	beq.n	8002be0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7ff fb5a 	bl	8002270 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7ff fb56 	bl	8002270 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	; 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e21f      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd2:	4b61      	ldr	r3, [pc, #388]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0xe8>
 8002bde:	e014      	b.n	8002c0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7ff fb46 	bl	8002270 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7ff fb42 	bl	8002270 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e20b      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfa:	4b57      	ldr	r3, [pc, #348]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x110>
 8002c06:	e000      	b.n	8002c0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d069      	beq.n	8002cea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c16:	4b50      	ldr	r3, [pc, #320]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00b      	beq.n	8002c3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c22:	4b4d      	ldr	r3, [pc, #308]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d11c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x190>
 8002c2e:	4b4a      	ldr	r3, [pc, #296]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d116      	bne.n	8002c68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3a:	4b47      	ldr	r3, [pc, #284]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_RCC_OscConfig+0x17a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e1df      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c52:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	493d      	ldr	r1, [pc, #244]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c66:	e040      	b.n	8002cea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d023      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c70:	4b39      	ldr	r3, [pc, #228]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a38      	ldr	r2, [pc, #224]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7ff faf8 	bl	8002270 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c84:	f7ff faf4 	bl	8002270 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e1bd      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c96:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca2:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4929      	ldr	r1, [pc, #164]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]
 8002cb6:	e018      	b.n	8002cea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a26      	ldr	r2, [pc, #152]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7ff fad4 	bl	8002270 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ccc:	f7ff fad0 	bl	8002270 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e199      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cde:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d038      	beq.n	8002d68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d019      	beq.n	8002d32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfe:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d02:	4a15      	ldr	r2, [pc, #84]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0a:	f7ff fab1 	bl	8002270 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d12:	f7ff faad 	bl	8002270 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e176      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x23a>
 8002d30:	e01a      	b.n	8002d68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d36:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3e:	f7ff fa97 	bl	8002270 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d46:	f7ff fa93 	bl	8002270 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d903      	bls.n	8002d5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e15c      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
 8002d58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5c:	4b91      	ldr	r3, [pc, #580]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ee      	bne.n	8002d46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80a4 	beq.w	8002ebe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d76:	4b8b      	ldr	r3, [pc, #556]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10d      	bne.n	8002d9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d82:	4b88      	ldr	r3, [pc, #544]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	4a87      	ldr	r2, [pc, #540]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8e:	4b85      	ldr	r3, [pc, #532]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d9e:	4b82      	ldr	r3, [pc, #520]	; (8002fa8 <HAL_RCC_OscConfig+0x4d0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d118      	bne.n	8002ddc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002daa:	4b7f      	ldr	r3, [pc, #508]	; (8002fa8 <HAL_RCC_OscConfig+0x4d0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a7e      	ldr	r2, [pc, #504]	; (8002fa8 <HAL_RCC_OscConfig+0x4d0>)
 8002db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db6:	f7ff fa5b 	bl	8002270 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbe:	f7ff fa57 	bl	8002270 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b64      	cmp	r3, #100	; 0x64
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e120      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd0:	4b75      	ldr	r3, [pc, #468]	; (8002fa8 <HAL_RCC_OscConfig+0x4d0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d106      	bne.n	8002df2 <HAL_RCC_OscConfig+0x31a>
 8002de4:	4b6f      	ldr	r3, [pc, #444]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	4a6e      	ldr	r2, [pc, #440]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6713      	str	r3, [r2, #112]	; 0x70
 8002df0:	e02d      	b.n	8002e4e <HAL_RCC_OscConfig+0x376>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x33c>
 8002dfa:	4b6a      	ldr	r3, [pc, #424]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	4a69      	ldr	r2, [pc, #420]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	6713      	str	r3, [r2, #112]	; 0x70
 8002e06:	4b67      	ldr	r3, [pc, #412]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	4a66      	ldr	r2, [pc, #408]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e0c:	f023 0304 	bic.w	r3, r3, #4
 8002e10:	6713      	str	r3, [r2, #112]	; 0x70
 8002e12:	e01c      	b.n	8002e4e <HAL_RCC_OscConfig+0x376>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b05      	cmp	r3, #5
 8002e1a:	d10c      	bne.n	8002e36 <HAL_RCC_OscConfig+0x35e>
 8002e1c:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	4a60      	ldr	r2, [pc, #384]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	6713      	str	r3, [r2, #112]	; 0x70
 8002e28:	4b5e      	ldr	r3, [pc, #376]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	4a5d      	ldr	r2, [pc, #372]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70
 8002e34:	e00b      	b.n	8002e4e <HAL_RCC_OscConfig+0x376>
 8002e36:	4b5b      	ldr	r3, [pc, #364]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	4a5a      	ldr	r2, [pc, #360]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	6713      	str	r3, [r2, #112]	; 0x70
 8002e42:	4b58      	ldr	r3, [pc, #352]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	4a57      	ldr	r2, [pc, #348]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e48:	f023 0304 	bic.w	r3, r3, #4
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d015      	beq.n	8002e82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e56:	f7ff fa0b 	bl	8002270 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5e:	f7ff fa07 	bl	8002270 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0ce      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e74:	4b4b      	ldr	r3, [pc, #300]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0ee      	beq.n	8002e5e <HAL_RCC_OscConfig+0x386>
 8002e80:	e014      	b.n	8002eac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7ff f9f5 	bl	8002270 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7ff f9f1 	bl	8002270 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e0b8      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea0:	4b40      	ldr	r3, [pc, #256]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1ee      	bne.n	8002e8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d105      	bne.n	8002ebe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb2:	4b3c      	ldr	r3, [pc, #240]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	4a3b      	ldr	r2, [pc, #236]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80a4 	beq.w	8003010 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ec8:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d06b      	beq.n	8002fac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d149      	bne.n	8002f70 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002edc:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a30      	ldr	r2, [pc, #192]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7ff f9c2 	bl	8002270 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7ff f9be 	bl	8002270 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e087      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f02:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	019b      	lsls	r3, r3, #6
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	3b01      	subs	r3, #1
 8002f28:	041b      	lsls	r3, r3, #16
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	061b      	lsls	r3, r3, #24
 8002f32:	4313      	orrs	r3, r2
 8002f34:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f3a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7ff f992 	bl	8002270 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7ff f98e 	bl	8002270 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e057      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x478>
 8002f6e:	e04f      	b.n	8003010 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0b      	ldr	r2, [pc, #44]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7ff f978 	bl	8002270 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f84:	f7ff f974 	bl	8002270 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e03d      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x4ac>
 8002fa2:	e035      	b.n	8003010 <HAL_RCC_OscConfig+0x538>
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <HAL_RCC_OscConfig+0x544>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d028      	beq.n	800300c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d121      	bne.n	800300c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d11a      	bne.n	800300c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fdc:	4013      	ands	r3, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fe2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d111      	bne.n	800300c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d107      	bne.n	800300c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800

08003020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0d0      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003038:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d910      	bls.n	8003068 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b67      	ldr	r3, [pc, #412]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 020f 	bic.w	r2, r3, #15
 800304e:	4965      	ldr	r1, [pc, #404]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0b8      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003080:	4b59      	ldr	r3, [pc, #356]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a58      	ldr	r2, [pc, #352]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800308a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003098:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4a52      	ldr	r2, [pc, #328]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 800309e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a4:	4b50      	ldr	r3, [pc, #320]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	494d      	ldr	r1, [pc, #308]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d040      	beq.n	8003144 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d115      	bne.n	8003102 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e07f      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e2:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e073      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f2:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e06b      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003102:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f023 0203 	bic.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4936      	ldr	r1, [pc, #216]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003110:	4313      	orrs	r3, r2
 8003112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003114:	f7ff f8ac 	bl	8002270 <HAL_GetTick>
 8003118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	e00a      	b.n	8003132 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311c:	f7ff f8a8 	bl	8002270 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e053      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 020c 	and.w	r2, r3, #12
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	429a      	cmp	r2, r3
 8003142:	d1eb      	bne.n	800311c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003144:	4b27      	ldr	r3, [pc, #156]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d210      	bcs.n	8003174 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 020f 	bic.w	r2, r3, #15
 800315a:	4922      	ldr	r1, [pc, #136]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e032      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003180:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4916      	ldr	r1, [pc, #88]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	490e      	ldr	r1, [pc, #56]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031b2:	f000 f821 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80031b6:	4602      	mov	r2, r0
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	490a      	ldr	r1, [pc, #40]	; (80031ec <HAL_RCC_ClockConfig+0x1cc>)
 80031c4:	5ccb      	ldrb	r3, [r1, r3]
 80031c6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ca:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1d0>)
 80031cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_ClockConfig+0x1d4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff f808 	bl	80021e8 <HAL_InitTick>

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023c00 	.word	0x40023c00
 80031e8:	40023800 	.word	0x40023800
 80031ec:	08006340 	.word	0x08006340
 80031f0:	20000000 	.word	0x20000000
 80031f4:	20000004 	.word	0x20000004

080031f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	2300      	movs	r3, #0
 800320a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003210:	4b67      	ldr	r3, [pc, #412]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b08      	cmp	r3, #8
 800321a:	d00d      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x40>
 800321c:	2b08      	cmp	r3, #8
 800321e:	f200 80bd 	bhi.w	800339c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x34>
 8003226:	2b04      	cmp	r3, #4
 8003228:	d003      	beq.n	8003232 <HAL_RCC_GetSysClockFreq+0x3a>
 800322a:	e0b7      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800322c:	4b61      	ldr	r3, [pc, #388]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800322e:	60bb      	str	r3, [r7, #8]
      break;
 8003230:	e0b7      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003232:	4b61      	ldr	r3, [pc, #388]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003234:	60bb      	str	r3, [r7, #8]
      break;
 8003236:	e0b4      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003238:	4b5d      	ldr	r3, [pc, #372]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003240:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003242:	4b5b      	ldr	r3, [pc, #364]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d04d      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324e:	4b58      	ldr	r3, [pc, #352]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	099b      	lsrs	r3, r3, #6
 8003254:	461a      	mov	r2, r3
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800325e:	f04f 0100 	mov.w	r1, #0
 8003262:	ea02 0800 	and.w	r8, r2, r0
 8003266:	ea03 0901 	and.w	r9, r3, r1
 800326a:	4640      	mov	r0, r8
 800326c:	4649      	mov	r1, r9
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	014b      	lsls	r3, r1, #5
 8003278:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800327c:	0142      	lsls	r2, r0, #5
 800327e:	4610      	mov	r0, r2
 8003280:	4619      	mov	r1, r3
 8003282:	ebb0 0008 	subs.w	r0, r0, r8
 8003286:	eb61 0109 	sbc.w	r1, r1, r9
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	018b      	lsls	r3, r1, #6
 8003294:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003298:	0182      	lsls	r2, r0, #6
 800329a:	1a12      	subs	r2, r2, r0
 800329c:	eb63 0301 	sbc.w	r3, r3, r1
 80032a0:	f04f 0000 	mov.w	r0, #0
 80032a4:	f04f 0100 	mov.w	r1, #0
 80032a8:	00d9      	lsls	r1, r3, #3
 80032aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032ae:	00d0      	lsls	r0, r2, #3
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	eb12 0208 	adds.w	r2, r2, r8
 80032b8:	eb43 0309 	adc.w	r3, r3, r9
 80032bc:	f04f 0000 	mov.w	r0, #0
 80032c0:	f04f 0100 	mov.w	r1, #0
 80032c4:	0259      	lsls	r1, r3, #9
 80032c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032ca:	0250      	lsls	r0, r2, #9
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4610      	mov	r0, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	461a      	mov	r2, r3
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	f7fd fc02 	bl	8000ae4 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4613      	mov	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e04a      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ea:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	461a      	mov	r2, r3
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032fa:	f04f 0100 	mov.w	r1, #0
 80032fe:	ea02 0400 	and.w	r4, r2, r0
 8003302:	ea03 0501 	and.w	r5, r3, r1
 8003306:	4620      	mov	r0, r4
 8003308:	4629      	mov	r1, r5
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	014b      	lsls	r3, r1, #5
 8003314:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003318:	0142      	lsls	r2, r0, #5
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	1b00      	subs	r0, r0, r4
 8003320:	eb61 0105 	sbc.w	r1, r1, r5
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	018b      	lsls	r3, r1, #6
 800332e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003332:	0182      	lsls	r2, r0, #6
 8003334:	1a12      	subs	r2, r2, r0
 8003336:	eb63 0301 	sbc.w	r3, r3, r1
 800333a:	f04f 0000 	mov.w	r0, #0
 800333e:	f04f 0100 	mov.w	r1, #0
 8003342:	00d9      	lsls	r1, r3, #3
 8003344:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003348:	00d0      	lsls	r0, r2, #3
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	1912      	adds	r2, r2, r4
 8003350:	eb45 0303 	adc.w	r3, r5, r3
 8003354:	f04f 0000 	mov.w	r0, #0
 8003358:	f04f 0100 	mov.w	r1, #0
 800335c:	0299      	lsls	r1, r3, #10
 800335e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003362:	0290      	lsls	r0, r2, #10
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	461a      	mov	r2, r3
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	f7fd fbb6 	bl	8000ae4 <__aeabi_uldivmod>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4613      	mov	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	3301      	adds	r3, #1
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	60bb      	str	r3, [r7, #8]
      break;
 800339a:	e002      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800339e:	60bb      	str	r3, [r7, #8]
      break;
 80033a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a2:	68bb      	ldr	r3, [r7, #8]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	00f42400 	.word	0x00f42400
 80033b8:	007a1200 	.word	0x007a1200

080033bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000000 	.word	0x20000000

080033d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033d8:	f7ff fff0 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 80033dc:	4602      	mov	r2, r0
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	0a9b      	lsrs	r3, r3, #10
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4903      	ldr	r1, [pc, #12]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ea:	5ccb      	ldrb	r3, [r1, r3]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40023800 	.word	0x40023800
 80033f8:	08006350 	.word	0x08006350

080033fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003400:	f7ff ffdc 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0b5b      	lsrs	r3, r3, #13
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4903      	ldr	r1, [pc, #12]	; (8003420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	08006350 	.word	0x08006350

08003424 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d012      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800344c:	4b69      	ldr	r3, [pc, #420]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4a68      	ldr	r2, [pc, #416]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003452:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003456:	6093      	str	r3, [r2, #8]
 8003458:	4b66      	ldr	r3, [pc, #408]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003460:	4964      	ldr	r1, [pc, #400]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003462:	4313      	orrs	r3, r2
 8003464:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800346e:	2301      	movs	r3, #1
 8003470:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d017      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800347e:	4b5d      	ldr	r3, [pc, #372]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348c:	4959      	ldr	r1, [pc, #356]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800349c:	d101      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800349e:	2301      	movs	r3, #1
 80034a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80034aa:	2301      	movs	r3, #1
 80034ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d017      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034ba:	4b4e      	ldr	r3, [pc, #312]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	494a      	ldr	r1, [pc, #296]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034d8:	d101      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80034da:	2301      	movs	r3, #1
 80034dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80034e6:	2301      	movs	r3, #1
 80034e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80034f6:	2301      	movs	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 808b 	beq.w	800361e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003508:	4b3a      	ldr	r3, [pc, #232]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	4a39      	ldr	r2, [pc, #228]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003512:	6413      	str	r3, [r2, #64]	; 0x40
 8003514:	4b37      	ldr	r3, [pc, #220]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003520:	4b35      	ldr	r3, [pc, #212]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a34      	ldr	r2, [pc, #208]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800352c:	f7fe fea0 	bl	8002270 <HAL_GetTick>
 8003530:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003534:	f7fe fe9c 	bl	8002270 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e357      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003546:	4b2c      	ldr	r3, [pc, #176]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003552:	4b28      	ldr	r3, [pc, #160]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d035      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	429a      	cmp	r2, r3
 800356e:	d02e      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003570:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003578:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800357a:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003584:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003586:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358a:	4a1a      	ldr	r2, [pc, #104]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003590:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003592:	4a18      	ldr	r2, [pc, #96]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003598:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d114      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe fe64 	bl	8002270 <HAL_GetTick>
 80035a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035aa:	e00a      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ac:	f7fe fe60 	bl	8002270 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e319      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0ee      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035da:	d111      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035e8:	4b04      	ldr	r3, [pc, #16]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80035ea:	400b      	ands	r3, r1
 80035ec:	4901      	ldr	r1, [pc, #4]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	608b      	str	r3, [r1, #8]
 80035f2:	e00b      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40007000 	.word	0x40007000
 80035fc:	0ffffcff 	.word	0x0ffffcff
 8003600:	4bb1      	ldr	r3, [pc, #708]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4ab0      	ldr	r2, [pc, #704]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003606:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800360a:	6093      	str	r3, [r2, #8]
 800360c:	4bae      	ldr	r3, [pc, #696]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800360e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003618:	49ab      	ldr	r1, [pc, #684]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800361a:	4313      	orrs	r3, r2
 800361c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b00      	cmp	r3, #0
 8003628:	d010      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800362a:	4ba7      	ldr	r3, [pc, #668]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800362c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003630:	4aa5      	ldr	r2, [pc, #660]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003636:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800363a:	4ba3      	ldr	r3, [pc, #652]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800363c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	49a0      	ldr	r1, [pc, #640]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003658:	4b9b      	ldr	r3, [pc, #620]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003666:	4998      	ldr	r1, [pc, #608]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800367a:	4b93      	ldr	r3, [pc, #588]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003680:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003688:	498f      	ldr	r1, [pc, #572]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800369c:	4b8a      	ldr	r3, [pc, #552]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036aa:	4987      	ldr	r1, [pc, #540]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036be:	4b82      	ldr	r3, [pc, #520]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	497e      	ldr	r1, [pc, #504]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036e0:	4b79      	ldr	r3, [pc, #484]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	f023 0203 	bic.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	4976      	ldr	r1, [pc, #472]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003702:	4b71      	ldr	r3, [pc, #452]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	f023 020c 	bic.w	r2, r3, #12
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003710:	496d      	ldr	r1, [pc, #436]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003724:	4b68      	ldr	r3, [pc, #416]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003732:	4965      	ldr	r1, [pc, #404]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003746:	4b60      	ldr	r3, [pc, #384]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003754:	495c      	ldr	r1, [pc, #368]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003768:	4b57      	ldr	r3, [pc, #348]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003776:	4954      	ldr	r1, [pc, #336]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800378a:	4b4f      	ldr	r3, [pc, #316]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003790:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	494b      	ldr	r1, [pc, #300]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037ac:	4b46      	ldr	r3, [pc, #280]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	4943      	ldr	r1, [pc, #268]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80037ce:	4b3e      	ldr	r3, [pc, #248]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037dc:	493a      	ldr	r1, [pc, #232]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037f0:	4b35      	ldr	r3, [pc, #212]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037fe:	4932      	ldr	r1, [pc, #200]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d011      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003812:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003818:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003820:	4929      	ldr	r1, [pc, #164]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800382c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003830:	d101      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003832:	2301      	movs	r3, #1
 8003834:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003842:	2301      	movs	r3, #1
 8003844:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003852:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003858:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003860:	4919      	ldr	r1, [pc, #100]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00b      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003874:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003884:	4910      	ldr	r1, [pc, #64]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d006      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80d9 	beq.w	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038a0:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a08      	ldr	r2, [pc, #32]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ac:	f7fe fce0 	bl	8002270 <HAL_GetTick>
 80038b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038b2:	e00b      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038b4:	f7fe fcdc 	bl	8002270 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	; 0x64
 80038c0:	d904      	bls.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e197      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038cc:	4b6c      	ldr	r3, [pc, #432]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1ed      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d021      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d11d      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038ec:	4b64      	ldr	r3, [pc, #400]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f2:	0c1b      	lsrs	r3, r3, #16
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038fa:	4b61      	ldr	r3, [pc, #388]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003900:	0e1b      	lsrs	r3, r3, #24
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	019a      	lsls	r2, r3, #6
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	041b      	lsls	r3, r3, #16
 8003912:	431a      	orrs	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	061b      	lsls	r3, r3, #24
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	071b      	lsls	r3, r3, #28
 8003920:	4957      	ldr	r1, [pc, #348]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d004      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800393c:	d00a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003946:	2b00      	cmp	r3, #0
 8003948:	d02e      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003952:	d129      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003954:	4b4a      	ldr	r3, [pc, #296]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800395a:	0c1b      	lsrs	r3, r3, #16
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003962:	4b47      	ldr	r3, [pc, #284]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003968:	0f1b      	lsrs	r3, r3, #28
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	019a      	lsls	r2, r3, #6
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	041b      	lsls	r3, r3, #16
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	061b      	lsls	r3, r3, #24
 8003982:	431a      	orrs	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	071b      	lsls	r3, r3, #28
 8003988:	493d      	ldr	r1, [pc, #244]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003990:	4b3b      	ldr	r3, [pc, #236]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003996:	f023 021f 	bic.w	r2, r3, #31
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	3b01      	subs	r3, #1
 80039a0:	4937      	ldr	r1, [pc, #220]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01d      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039b4:	4b32      	ldr	r3, [pc, #200]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ba:	0e1b      	lsrs	r3, r3, #24
 80039bc:	f003 030f 	and.w	r3, r3, #15
 80039c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039c2:	4b2f      	ldr	r3, [pc, #188]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c8:	0f1b      	lsrs	r3, r3, #28
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	019a      	lsls	r2, r3, #6
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	041b      	lsls	r3, r3, #16
 80039dc:	431a      	orrs	r2, r3
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	061b      	lsls	r3, r3, #24
 80039e2:	431a      	orrs	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	071b      	lsls	r3, r3, #28
 80039e8:	4925      	ldr	r1, [pc, #148]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d011      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	019a      	lsls	r2, r3, #6
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	041b      	lsls	r3, r3, #16
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	061b      	lsls	r3, r3, #24
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	071b      	lsls	r3, r3, #28
 8003a18:	4919      	ldr	r1, [pc, #100]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a20:	4b17      	ldr	r3, [pc, #92]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a16      	ldr	r2, [pc, #88]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a2c:	f7fe fc20 	bl	8002270 <HAL_GetTick>
 8003a30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a34:	f7fe fc1c 	bl	8002270 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e0d7      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a46:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	f040 80cd 	bne.w	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a5a:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a08      	ldr	r2, [pc, #32]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a66:	f7fe fc03 	bl	8002270 <HAL_GetTick>
 8003a6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a6c:	e00a      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a6e:	f7fe fbff 	bl	8002270 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b64      	cmp	r3, #100	; 0x64
 8003a7a:	d903      	bls.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e0ba      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003a80:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a84:	4b5e      	ldr	r3, [pc, #376]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a90:	d0ed      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d009      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d02e      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d12a      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003aba:	4b51      	ldr	r3, [pc, #324]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ac8:	4b4d      	ldr	r3, [pc, #308]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ace:	0f1b      	lsrs	r3, r3, #28
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	019a      	lsls	r2, r3, #6
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	041b      	lsls	r3, r3, #16
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	061b      	lsls	r3, r3, #24
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	071b      	lsls	r3, r3, #28
 8003aee:	4944      	ldr	r1, [pc, #272]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003af6:	4b42      	ldr	r3, [pc, #264]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003afc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	3b01      	subs	r3, #1
 8003b06:	021b      	lsls	r3, r3, #8
 8003b08:	493d      	ldr	r1, [pc, #244]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d022      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b24:	d11d      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b26:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2c:	0e1b      	lsrs	r3, r3, #24
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b34:	4b32      	ldr	r3, [pc, #200]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3a:	0f1b      	lsrs	r3, r3, #28
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	019a      	lsls	r2, r3, #6
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	041b      	lsls	r3, r3, #16
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	061b      	lsls	r3, r3, #24
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	071b      	lsls	r3, r3, #28
 8003b5a:	4929      	ldr	r1, [pc, #164]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d028      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b6e:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b74:	0e1b      	lsrs	r3, r3, #24
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b7c:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b82:	0c1b      	lsrs	r3, r3, #16
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	019a      	lsls	r2, r3, #6
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	041b      	lsls	r3, r3, #16
 8003b94:	431a      	orrs	r2, r3
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	061b      	lsls	r3, r3, #24
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	071b      	lsls	r3, r3, #28
 8003ba2:	4917      	ldr	r1, [pc, #92]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	4911      	ldr	r1, [pc, #68]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a0e      	ldr	r2, [pc, #56]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bcc:	f7fe fb50 	bl	8002270 <HAL_GetTick>
 8003bd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bd4:	f7fe fb4c 	bl	8002270 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	; 0x64
 8003be0:	d901      	bls.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e007      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003be6:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bf2:	d1ef      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800

08003c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e09d      	b.n	8003d52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d108      	bne.n	8003c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c26:	d009      	beq.n	8003c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	61da      	str	r2, [r3, #28]
 8003c2e:	e005      	b.n	8003c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fe f8c0 	bl	8001ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c7c:	d902      	bls.n	8003c84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	e002      	b.n	8003c8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c92:	d007      	beq.n	8003ca4 <HAL_SPI_Init+0xa0>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c9c:	d002      	beq.n	8003ca4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	ea42 0103 	orr.w	r1, r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	0c1b      	lsrs	r3, r3, #16
 8003d00:	f003 0204 	and.w	r2, r3, #4
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	f003 0310 	and.w	r3, r3, #16
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d20:	ea42 0103 	orr.w	r1, r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b08a      	sub	sp, #40	; 0x28
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_SPI_TransmitReceive+0x26>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e1fb      	b.n	8004178 <HAL_SPI_TransmitReceive+0x41e>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d88:	f7fe fa72 	bl	8002270 <HAL_GetTick>
 8003d8c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d94:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003d9c:	887b      	ldrh	r3, [r7, #2]
 8003d9e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003da0:	887b      	ldrh	r3, [r7, #2]
 8003da2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003da4:	7efb      	ldrb	r3, [r7, #27]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d00e      	beq.n	8003dc8 <HAL_SPI_TransmitReceive+0x6e>
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db0:	d106      	bne.n	8003dc0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d102      	bne.n	8003dc0 <HAL_SPI_TransmitReceive+0x66>
 8003dba:	7efb      	ldrb	r3, [r7, #27]
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d003      	beq.n	8003dc8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003dc6:	e1cd      	b.n	8004164 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_SPI_TransmitReceive+0x80>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <HAL_SPI_TransmitReceive+0x80>
 8003dd4:	887b      	ldrh	r3, [r7, #2]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003de0:	e1c0      	b.n	8004164 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d003      	beq.n	8003df6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2205      	movs	r2, #5
 8003df2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	887a      	ldrh	r2, [r7, #2]
 8003e06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	887a      	ldrh	r2, [r7, #2]
 8003e0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	887a      	ldrh	r2, [r7, #2]
 8003e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	887a      	ldrh	r2, [r7, #2]
 8003e22:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e38:	d802      	bhi.n	8003e40 <HAL_SPI_TransmitReceive+0xe6>
 8003e3a:	8a3b      	ldrh	r3, [r7, #16]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d908      	bls.n	8003e52 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e4e:	605a      	str	r2, [r3, #4]
 8003e50:	e007      	b.n	8003e62 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e60:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	d007      	beq.n	8003e80 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e88:	d97c      	bls.n	8003f84 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_SPI_TransmitReceive+0x13e>
 8003e92:	8a7b      	ldrh	r3, [r7, #18]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d169      	bne.n	8003f6c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	881a      	ldrh	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	1c9a      	adds	r2, r3, #2
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ebc:	e056      	b.n	8003f6c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d11b      	bne.n	8003f04 <HAL_SPI_TransmitReceive+0x1aa>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d016      	beq.n	8003f04 <HAL_SPI_TransmitReceive+0x1aa>
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d113      	bne.n	8003f04 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	881a      	ldrh	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eec:	1c9a      	adds	r2, r3, #2
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d11c      	bne.n	8003f4c <HAL_SPI_TransmitReceive+0x1f2>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d016      	beq.n	8003f4c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	b292      	uxth	r2, r2
 8003f2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	1c9a      	adds	r2, r3, #2
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f4c:	f7fe f990 	bl	8002270 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d807      	bhi.n	8003f6c <HAL_SPI_TransmitReceive+0x212>
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f62:	d003      	beq.n	8003f6c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f6a:	e0fb      	b.n	8004164 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1a3      	bne.n	8003ebe <HAL_SPI_TransmitReceive+0x164>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d19d      	bne.n	8003ebe <HAL_SPI_TransmitReceive+0x164>
 8003f82:	e0df      	b.n	8004144 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_SPI_TransmitReceive+0x23a>
 8003f8c:	8a7b      	ldrh	r3, [r7, #18]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	f040 80cb 	bne.w	800412a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d912      	bls.n	8003fc4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	881a      	ldrh	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	1c9a      	adds	r2, r3, #2
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b02      	subs	r3, #2
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fc2:	e0b2      	b.n	800412a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	7812      	ldrb	r2, [r2, #0]
 8003fd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fea:	e09e      	b.n	800412a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d134      	bne.n	8004064 <HAL_SPI_TransmitReceive+0x30a>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d02f      	beq.n	8004064 <HAL_SPI_TransmitReceive+0x30a>
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	2b01      	cmp	r3, #1
 8004008:	d12c      	bne.n	8004064 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	d912      	bls.n	800403a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	881a      	ldrh	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004024:	1c9a      	adds	r2, r3, #2
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b02      	subs	r3, #2
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004038:	e012      	b.n	8004060 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	7812      	ldrb	r2, [r2, #0]
 8004046:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	d148      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x3aa>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d042      	beq.n	8004104 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d923      	bls.n	80040d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	b292      	uxth	r2, r2
 8004096:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	1c9a      	adds	r2, r3, #2
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b02      	subs	r3, #2
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d81f      	bhi.n	8004100 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040ce:	605a      	str	r2, [r3, #4]
 80040d0:	e016      	b.n	8004100 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f103 020c 	add.w	r2, r3, #12
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	7812      	ldrb	r2, [r2, #0]
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004100:	2301      	movs	r3, #1
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004104:	f7fe f8b4 	bl	8002270 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004110:	429a      	cmp	r2, r3
 8004112:	d803      	bhi.n	800411c <HAL_SPI_TransmitReceive+0x3c2>
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411a:	d102      	bne.n	8004122 <HAL_SPI_TransmitReceive+0x3c8>
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	2b00      	cmp	r3, #0
 8004120:	d103      	bne.n	800412a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004128:	e01c      	b.n	8004164 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	f47f af5b 	bne.w	8003fec <HAL_SPI_TransmitReceive+0x292>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	f47f af54 	bne.w	8003fec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 f937 	bl	80043bc <SPI_EndRxTxTransaction>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d006      	beq.n	8004162 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	661a      	str	r2, [r3, #96]	; 0x60
 8004160:	e000      	b.n	8004164 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004162:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004178:	4618      	mov	r0, r3
 800417a:	3728      	adds	r7, #40	; 0x28
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	4613      	mov	r3, r2
 800418e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004190:	f7fe f86e 	bl	8002270 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	4413      	add	r3, r2
 800419e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041a0:	f7fe f866 	bl	8002270 <HAL_GetTick>
 80041a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041a6:	4b39      	ldr	r3, [pc, #228]	; (800428c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	015b      	lsls	r3, r3, #5
 80041ac:	0d1b      	lsrs	r3, r3, #20
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	fb02 f303 	mul.w	r3, r2, r3
 80041b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041b6:	e054      	b.n	8004262 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041be:	d050      	beq.n	8004262 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041c0:	f7fe f856 	bl	8002270 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d902      	bls.n	80041d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d13d      	bne.n	8004252 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ee:	d111      	bne.n	8004214 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f8:	d004      	beq.n	8004204 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004202:	d107      	bne.n	8004214 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004212:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800421c:	d10f      	bne.n	800423e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800423c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e017      	b.n	8004282 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	3b01      	subs	r3, #1
 8004260:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4013      	ands	r3, r2
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	429a      	cmp	r2, r3
 8004270:	bf0c      	ite	eq
 8004272:	2301      	moveq	r3, #1
 8004274:	2300      	movne	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	429a      	cmp	r2, r3
 800427e:	d19b      	bne.n	80041b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3720      	adds	r7, #32
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000000 	.word	0x20000000

08004290 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08a      	sub	sp, #40	; 0x28
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800429e:	2300      	movs	r3, #0
 80042a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80042a2:	f7fd ffe5 	bl	8002270 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	1a9b      	subs	r3, r3, r2
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	4413      	add	r3, r2
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80042b2:	f7fd ffdd 	bl	8002270 <HAL_GetTick>
 80042b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	330c      	adds	r3, #12
 80042be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80042c0:	4b3d      	ldr	r3, [pc, #244]	; (80043b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	00da      	lsls	r2, r3, #3
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	0d1b      	lsrs	r3, r3, #20
 80042d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
 80042d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80042d8:	e060      	b.n	800439c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042e0:	d107      	bne.n	80042f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d104      	bne.n	80042f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80042f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d050      	beq.n	800439c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042fa:	f7fd ffb9 	bl	8002270 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004306:	429a      	cmp	r2, r3
 8004308:	d902      	bls.n	8004310 <SPI_WaitFifoStateUntilTimeout+0x80>
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	2b00      	cmp	r3, #0
 800430e:	d13d      	bne.n	800438c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800431e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004328:	d111      	bne.n	800434e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004332:	d004      	beq.n	800433e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433c:	d107      	bne.n	800434e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800434c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004356:	d10f      	bne.n	8004378 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004376:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e010      	b.n	80043ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	3b01      	subs	r3, #1
 800439a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	4013      	ands	r3, r2
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d196      	bne.n	80042da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3728      	adds	r7, #40	; 0x28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000000 	.word	0x20000000

080043bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7ff ff5b 	bl	8004290 <SPI_WaitFifoStateUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d007      	beq.n	80043f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e4:	f043 0220 	orr.w	r2, r3, #32
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e046      	b.n	800447e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <SPI_EndRxTxTransaction+0xcc>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a25      	ldr	r2, [pc, #148]	; (800448c <SPI_EndRxTxTransaction+0xd0>)
 80043f6:	fba2 2303 	umull	r2, r3, r2, r3
 80043fa:	0d5b      	lsrs	r3, r3, #21
 80043fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004400:	fb02 f303 	mul.w	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800440e:	d112      	bne.n	8004436 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2200      	movs	r2, #0
 8004418:	2180      	movs	r1, #128	; 0x80
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff feb0 	bl	8004180 <SPI_WaitFlagStateUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d016      	beq.n	8004454 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442a:	f043 0220 	orr.w	r2, r3, #32
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e023      	b.n	800447e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	3b01      	subs	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444c:	2b80      	cmp	r3, #128	; 0x80
 800444e:	d0f2      	beq.n	8004436 <SPI_EndRxTxTransaction+0x7a>
 8004450:	e000      	b.n	8004454 <SPI_EndRxTxTransaction+0x98>
        break;
 8004452:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2200      	movs	r2, #0
 800445c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f7ff ff15 	bl	8004290 <SPI_WaitFifoStateUntilTimeout>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d007      	beq.n	800447c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004470:	f043 0220 	orr.w	r2, r3, #32
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e000      	b.n	800447e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000000 	.word	0x20000000
 800448c:	165e9f81 	.word	0x165e9f81

08004490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e049      	b.n	8004536 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fd fcf2 	bl	8001ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3304      	adds	r3, #4
 80044cc:	4619      	mov	r1, r3
 80044ce:	4610      	mov	r0, r2
 80044d0:	f000 fb6e 	bl	8004bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e049      	b.n	80045e4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d106      	bne.n	800456a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f841 	bl	80045ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3304      	adds	r3, #4
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f000 fb17 	bl	8004bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d109      	bne.n	8004624 <HAL_TIM_PWM_Start+0x24>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	e03c      	b.n	800469e <HAL_TIM_PWM_Start+0x9e>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b04      	cmp	r3, #4
 8004628:	d109      	bne.n	800463e <HAL_TIM_PWM_Start+0x3e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b01      	cmp	r3, #1
 8004634:	bf14      	ite	ne
 8004636:	2301      	movne	r3, #1
 8004638:	2300      	moveq	r3, #0
 800463a:	b2db      	uxtb	r3, r3
 800463c:	e02f      	b.n	800469e <HAL_TIM_PWM_Start+0x9e>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b08      	cmp	r3, #8
 8004642:	d109      	bne.n	8004658 <HAL_TIM_PWM_Start+0x58>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	bf14      	ite	ne
 8004650:	2301      	movne	r3, #1
 8004652:	2300      	moveq	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	e022      	b.n	800469e <HAL_TIM_PWM_Start+0x9e>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b0c      	cmp	r3, #12
 800465c:	d109      	bne.n	8004672 <HAL_TIM_PWM_Start+0x72>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b01      	cmp	r3, #1
 8004668:	bf14      	ite	ne
 800466a:	2301      	movne	r3, #1
 800466c:	2300      	moveq	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	e015      	b.n	800469e <HAL_TIM_PWM_Start+0x9e>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b10      	cmp	r3, #16
 8004676:	d109      	bne.n	800468c <HAL_TIM_PWM_Start+0x8c>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	bf14      	ite	ne
 8004684:	2301      	movne	r3, #1
 8004686:	2300      	moveq	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	e008      	b.n	800469e <HAL_TIM_PWM_Start+0x9e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	bf14      	ite	ne
 8004698:	2301      	movne	r3, #1
 800469a:	2300      	moveq	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e092      	b.n	80047cc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d104      	bne.n	80046b6 <HAL_TIM_PWM_Start+0xb6>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046b4:	e023      	b.n	80046fe <HAL_TIM_PWM_Start+0xfe>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d104      	bne.n	80046c6 <HAL_TIM_PWM_Start+0xc6>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046c4:	e01b      	b.n	80046fe <HAL_TIM_PWM_Start+0xfe>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d104      	bne.n	80046d6 <HAL_TIM_PWM_Start+0xd6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d4:	e013      	b.n	80046fe <HAL_TIM_PWM_Start+0xfe>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b0c      	cmp	r3, #12
 80046da:	d104      	bne.n	80046e6 <HAL_TIM_PWM_Start+0xe6>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046e4:	e00b      	b.n	80046fe <HAL_TIM_PWM_Start+0xfe>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b10      	cmp	r3, #16
 80046ea:	d104      	bne.n	80046f6 <HAL_TIM_PWM_Start+0xf6>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046f4:	e003      	b.n	80046fe <HAL_TIM_PWM_Start+0xfe>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2201      	movs	r2, #1
 8004704:	6839      	ldr	r1, [r7, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fdea 	bl	80052e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a30      	ldr	r2, [pc, #192]	; (80047d4 <HAL_TIM_PWM_Start+0x1d4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d004      	beq.n	8004720 <HAL_TIM_PWM_Start+0x120>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a2f      	ldr	r2, [pc, #188]	; (80047d8 <HAL_TIM_PWM_Start+0x1d8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d101      	bne.n	8004724 <HAL_TIM_PWM_Start+0x124>
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <HAL_TIM_PWM_Start+0x126>
 8004724:	2300      	movs	r3, #0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d007      	beq.n	800473a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004738:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a25      	ldr	r2, [pc, #148]	; (80047d4 <HAL_TIM_PWM_Start+0x1d4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d022      	beq.n	800478a <HAL_TIM_PWM_Start+0x18a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474c:	d01d      	beq.n	800478a <HAL_TIM_PWM_Start+0x18a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a22      	ldr	r2, [pc, #136]	; (80047dc <HAL_TIM_PWM_Start+0x1dc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d018      	beq.n	800478a <HAL_TIM_PWM_Start+0x18a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a20      	ldr	r2, [pc, #128]	; (80047e0 <HAL_TIM_PWM_Start+0x1e0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d013      	beq.n	800478a <HAL_TIM_PWM_Start+0x18a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1f      	ldr	r2, [pc, #124]	; (80047e4 <HAL_TIM_PWM_Start+0x1e4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00e      	beq.n	800478a <HAL_TIM_PWM_Start+0x18a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <HAL_TIM_PWM_Start+0x1d8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d009      	beq.n	800478a <HAL_TIM_PWM_Start+0x18a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a1b      	ldr	r2, [pc, #108]	; (80047e8 <HAL_TIM_PWM_Start+0x1e8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d004      	beq.n	800478a <HAL_TIM_PWM_Start+0x18a>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a19      	ldr	r2, [pc, #100]	; (80047ec <HAL_TIM_PWM_Start+0x1ec>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d115      	bne.n	80047b6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	4b17      	ldr	r3, [pc, #92]	; (80047f0 <HAL_TIM_PWM_Start+0x1f0>)
 8004792:	4013      	ands	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b06      	cmp	r3, #6
 800479a:	d015      	beq.n	80047c8 <HAL_TIM_PWM_Start+0x1c8>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a2:	d011      	beq.n	80047c8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b4:	e008      	b.n	80047c8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	e000      	b.n	80047ca <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40010000 	.word	0x40010000
 80047d8:	40010400 	.word	0x40010400
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40001800 	.word	0x40001800
 80047f0:	00010007 	.word	0x00010007

080047f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800480e:	2302      	movs	r3, #2
 8004810:	e0ff      	b.n	8004a12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b14      	cmp	r3, #20
 800481e:	f200 80f0 	bhi.w	8004a02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004822:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004828:	0800487d 	.word	0x0800487d
 800482c:	08004a03 	.word	0x08004a03
 8004830:	08004a03 	.word	0x08004a03
 8004834:	08004a03 	.word	0x08004a03
 8004838:	080048bd 	.word	0x080048bd
 800483c:	08004a03 	.word	0x08004a03
 8004840:	08004a03 	.word	0x08004a03
 8004844:	08004a03 	.word	0x08004a03
 8004848:	080048ff 	.word	0x080048ff
 800484c:	08004a03 	.word	0x08004a03
 8004850:	08004a03 	.word	0x08004a03
 8004854:	08004a03 	.word	0x08004a03
 8004858:	0800493f 	.word	0x0800493f
 800485c:	08004a03 	.word	0x08004a03
 8004860:	08004a03 	.word	0x08004a03
 8004864:	08004a03 	.word	0x08004a03
 8004868:	08004981 	.word	0x08004981
 800486c:	08004a03 	.word	0x08004a03
 8004870:	08004a03 	.word	0x08004a03
 8004874:	08004a03 	.word	0x08004a03
 8004878:	080049c1 	.word	0x080049c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68b9      	ldr	r1, [r7, #8]
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fa34 	bl	8004cf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699a      	ldr	r2, [r3, #24]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0208 	orr.w	r2, r2, #8
 8004896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0204 	bic.w	r2, r2, #4
 80048a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6999      	ldr	r1, [r3, #24]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	619a      	str	r2, [r3, #24]
      break;
 80048ba:	e0a5      	b.n	8004a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fa86 	bl	8004dd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6999      	ldr	r1, [r3, #24]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	021a      	lsls	r2, r3, #8
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	619a      	str	r2, [r3, #24]
      break;
 80048fc:	e084      	b.n	8004a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fadd 	bl	8004ec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0208 	orr.w	r2, r2, #8
 8004918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69da      	ldr	r2, [r3, #28]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0204 	bic.w	r2, r2, #4
 8004928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69d9      	ldr	r1, [r3, #28]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	61da      	str	r2, [r3, #28]
      break;
 800493c:	e064      	b.n	8004a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68b9      	ldr	r1, [r7, #8]
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fb33 	bl	8004fb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69da      	ldr	r2, [r3, #28]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69d9      	ldr	r1, [r3, #28]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	021a      	lsls	r2, r3, #8
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	61da      	str	r2, [r3, #28]
      break;
 800497e:	e043      	b.n	8004a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fb6a 	bl	8005060 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0208 	orr.w	r2, r2, #8
 800499a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0204 	bic.w	r2, r2, #4
 80049aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	691a      	ldr	r2, [r3, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049be:	e023      	b.n	8004a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fb9c 	bl	8005104 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	021a      	lsls	r2, r3, #8
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a00:	e002      	b.n	8004a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	75fb      	strb	r3, [r7, #23]
      break;
 8004a06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop

08004a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_TIM_ConfigClockSource+0x1c>
 8004a34:	2302      	movs	r3, #2
 8004a36:	e0b4      	b.n	8004ba2 <HAL_TIM_ConfigClockSource+0x186>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	4b56      	ldr	r3, [pc, #344]	; (8004bac <HAL_TIM_ConfigClockSource+0x190>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a70:	d03e      	beq.n	8004af0 <HAL_TIM_ConfigClockSource+0xd4>
 8004a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a76:	f200 8087 	bhi.w	8004b88 <HAL_TIM_ConfigClockSource+0x16c>
 8004a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7e:	f000 8086 	beq.w	8004b8e <HAL_TIM_ConfigClockSource+0x172>
 8004a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a86:	d87f      	bhi.n	8004b88 <HAL_TIM_ConfigClockSource+0x16c>
 8004a88:	2b70      	cmp	r3, #112	; 0x70
 8004a8a:	d01a      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0xa6>
 8004a8c:	2b70      	cmp	r3, #112	; 0x70
 8004a8e:	d87b      	bhi.n	8004b88 <HAL_TIM_ConfigClockSource+0x16c>
 8004a90:	2b60      	cmp	r3, #96	; 0x60
 8004a92:	d050      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x11a>
 8004a94:	2b60      	cmp	r3, #96	; 0x60
 8004a96:	d877      	bhi.n	8004b88 <HAL_TIM_ConfigClockSource+0x16c>
 8004a98:	2b50      	cmp	r3, #80	; 0x50
 8004a9a:	d03c      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0xfa>
 8004a9c:	2b50      	cmp	r3, #80	; 0x50
 8004a9e:	d873      	bhi.n	8004b88 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa0:	2b40      	cmp	r3, #64	; 0x40
 8004aa2:	d058      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x13a>
 8004aa4:	2b40      	cmp	r3, #64	; 0x40
 8004aa6:	d86f      	bhi.n	8004b88 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa8:	2b30      	cmp	r3, #48	; 0x30
 8004aaa:	d064      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0x15a>
 8004aac:	2b30      	cmp	r3, #48	; 0x30
 8004aae:	d86b      	bhi.n	8004b88 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d060      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0x15a>
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d867      	bhi.n	8004b88 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d05c      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0x15a>
 8004abc:	2b10      	cmp	r3, #16
 8004abe:	d05a      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0x15a>
 8004ac0:	e062      	b.n	8004b88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6899      	ldr	r1, [r3, #8]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f000 fbe5 	bl	80052a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ae4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	609a      	str	r2, [r3, #8]
      break;
 8004aee:	e04f      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	6899      	ldr	r1, [r3, #8]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f000 fbce 	bl	80052a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b12:	609a      	str	r2, [r3, #8]
      break;
 8004b14:	e03c      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	6859      	ldr	r1, [r3, #4]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	461a      	mov	r2, r3
 8004b24:	f000 fb42 	bl	80051ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2150      	movs	r1, #80	; 0x50
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fb9b 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 8004b34:	e02c      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	6859      	ldr	r1, [r3, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	461a      	mov	r2, r3
 8004b44:	f000 fb61 	bl	800520a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2160      	movs	r1, #96	; 0x60
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fb8b 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 8004b54:	e01c      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	6859      	ldr	r1, [r3, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	461a      	mov	r2, r3
 8004b64:	f000 fb22 	bl	80051ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2140      	movs	r1, #64	; 0x40
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fb7b 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 8004b74:	e00c      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4610      	mov	r0, r2
 8004b82:	f000 fb72 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 8004b86:	e003      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b8c:	e000      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	fffeff88 	.word	0xfffeff88

08004bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a40      	ldr	r2, [pc, #256]	; (8004cc4 <TIM_Base_SetConfig+0x114>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d013      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bce:	d00f      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a3d      	ldr	r2, [pc, #244]	; (8004cc8 <TIM_Base_SetConfig+0x118>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00b      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a3c      	ldr	r2, [pc, #240]	; (8004ccc <TIM_Base_SetConfig+0x11c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d007      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a3b      	ldr	r2, [pc, #236]	; (8004cd0 <TIM_Base_SetConfig+0x120>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d003      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a3a      	ldr	r2, [pc, #232]	; (8004cd4 <TIM_Base_SetConfig+0x124>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d108      	bne.n	8004c02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a2f      	ldr	r2, [pc, #188]	; (8004cc4 <TIM_Base_SetConfig+0x114>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d02b      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c10:	d027      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a2c      	ldr	r2, [pc, #176]	; (8004cc8 <TIM_Base_SetConfig+0x118>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d023      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a2b      	ldr	r2, [pc, #172]	; (8004ccc <TIM_Base_SetConfig+0x11c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01f      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a2a      	ldr	r2, [pc, #168]	; (8004cd0 <TIM_Base_SetConfig+0x120>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d01b      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a29      	ldr	r2, [pc, #164]	; (8004cd4 <TIM_Base_SetConfig+0x124>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d017      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <TIM_Base_SetConfig+0x128>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d013      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a27      	ldr	r2, [pc, #156]	; (8004cdc <TIM_Base_SetConfig+0x12c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00f      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a26      	ldr	r2, [pc, #152]	; (8004ce0 <TIM_Base_SetConfig+0x130>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00b      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a25      	ldr	r2, [pc, #148]	; (8004ce4 <TIM_Base_SetConfig+0x134>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d007      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a24      	ldr	r2, [pc, #144]	; (8004ce8 <TIM_Base_SetConfig+0x138>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d003      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a23      	ldr	r2, [pc, #140]	; (8004cec <TIM_Base_SetConfig+0x13c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d108      	bne.n	8004c74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	; (8004cc4 <TIM_Base_SetConfig+0x114>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <TIM_Base_SetConfig+0xf8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a0c      	ldr	r2, [pc, #48]	; (8004cd4 <TIM_Base_SetConfig+0x124>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d103      	bne.n	8004cb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	691a      	ldr	r2, [r3, #16]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	615a      	str	r2, [r3, #20]
}
 8004cb6:	bf00      	nop
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40010000 	.word	0x40010000
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	40000800 	.word	0x40000800
 8004cd0:	40000c00 	.word	0x40000c00
 8004cd4:	40010400 	.word	0x40010400
 8004cd8:	40014000 	.word	0x40014000
 8004cdc:	40014400 	.word	0x40014400
 8004ce0:	40014800 	.word	0x40014800
 8004ce4:	40001800 	.word	0x40001800
 8004ce8:	40001c00 	.word	0x40001c00
 8004cec:	40002000 	.word	0x40002000

08004cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f023 0201 	bic.w	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4b2b      	ldr	r3, [pc, #172]	; (8004dc8 <TIM_OC1_SetConfig+0xd8>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f023 0302 	bic.w	r3, r3, #2
 8004d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a21      	ldr	r2, [pc, #132]	; (8004dcc <TIM_OC1_SetConfig+0xdc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_OC1_SetConfig+0x64>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a20      	ldr	r2, [pc, #128]	; (8004dd0 <TIM_OC1_SetConfig+0xe0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d10c      	bne.n	8004d6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f023 0308 	bic.w	r3, r3, #8
 8004d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f023 0304 	bic.w	r3, r3, #4
 8004d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a16      	ldr	r2, [pc, #88]	; (8004dcc <TIM_OC1_SetConfig+0xdc>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d003      	beq.n	8004d7e <TIM_OC1_SetConfig+0x8e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <TIM_OC1_SetConfig+0xe0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d111      	bne.n	8004da2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	621a      	str	r2, [r3, #32]
}
 8004dbc:	bf00      	nop
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	fffeff8f 	.word	0xfffeff8f
 8004dcc:	40010000 	.word	0x40010000
 8004dd0:	40010400 	.word	0x40010400

08004dd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f023 0210 	bic.w	r2, r3, #16
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4b2e      	ldr	r3, [pc, #184]	; (8004eb8 <TIM_OC2_SetConfig+0xe4>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0320 	bic.w	r3, r3, #32
 8004e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a23      	ldr	r2, [pc, #140]	; (8004ebc <TIM_OC2_SetConfig+0xe8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d003      	beq.n	8004e3c <TIM_OC2_SetConfig+0x68>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a22      	ldr	r2, [pc, #136]	; (8004ec0 <TIM_OC2_SetConfig+0xec>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d10d      	bne.n	8004e58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a18      	ldr	r2, [pc, #96]	; (8004ebc <TIM_OC2_SetConfig+0xe8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_OC2_SetConfig+0x94>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a17      	ldr	r2, [pc, #92]	; (8004ec0 <TIM_OC2_SetConfig+0xec>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d113      	bne.n	8004e90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	621a      	str	r2, [r3, #32]
}
 8004eaa:	bf00      	nop
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	feff8fff 	.word	0xfeff8fff
 8004ebc:	40010000 	.word	0x40010000
 8004ec0:	40010400 	.word	0x40010400

08004ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4b2d      	ldr	r3, [pc, #180]	; (8004fa4 <TIM_OC3_SetConfig+0xe0>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0303 	bic.w	r3, r3, #3
 8004efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	021b      	lsls	r3, r3, #8
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a22      	ldr	r2, [pc, #136]	; (8004fa8 <TIM_OC3_SetConfig+0xe4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d003      	beq.n	8004f2a <TIM_OC3_SetConfig+0x66>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a21      	ldr	r2, [pc, #132]	; (8004fac <TIM_OC3_SetConfig+0xe8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d10d      	bne.n	8004f46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a17      	ldr	r2, [pc, #92]	; (8004fa8 <TIM_OC3_SetConfig+0xe4>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d003      	beq.n	8004f56 <TIM_OC3_SetConfig+0x92>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a16      	ldr	r2, [pc, #88]	; (8004fac <TIM_OC3_SetConfig+0xe8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d113      	bne.n	8004f7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	621a      	str	r2, [r3, #32]
}
 8004f98:	bf00      	nop
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	fffeff8f 	.word	0xfffeff8f
 8004fa8:	40010000 	.word	0x40010000
 8004fac:	40010400 	.word	0x40010400

08004fb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4b1e      	ldr	r3, [pc, #120]	; (8005054 <TIM_OC4_SetConfig+0xa4>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	021b      	lsls	r3, r3, #8
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	031b      	lsls	r3, r3, #12
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a13      	ldr	r2, [pc, #76]	; (8005058 <TIM_OC4_SetConfig+0xa8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d003      	beq.n	8005018 <TIM_OC4_SetConfig+0x68>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a12      	ldr	r2, [pc, #72]	; (800505c <TIM_OC4_SetConfig+0xac>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d109      	bne.n	800502c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800501e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	019b      	lsls	r3, r3, #6
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	621a      	str	r2, [r3, #32]
}
 8005046:	bf00      	nop
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	feff8fff 	.word	0xfeff8fff
 8005058:	40010000 	.word	0x40010000
 800505c:	40010400 	.word	0x40010400

08005060 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <TIM_OC5_SetConfig+0x98>)
 800508c:	4013      	ands	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80050a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	041b      	lsls	r3, r3, #16
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a12      	ldr	r2, [pc, #72]	; (80050fc <TIM_OC5_SetConfig+0x9c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d003      	beq.n	80050be <TIM_OC5_SetConfig+0x5e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a11      	ldr	r2, [pc, #68]	; (8005100 <TIM_OC5_SetConfig+0xa0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d109      	bne.n	80050d2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	621a      	str	r2, [r3, #32]
}
 80050ec:	bf00      	nop
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	fffeff8f 	.word	0xfffeff8f
 80050fc:	40010000 	.word	0x40010000
 8005100:	40010400 	.word	0x40010400

08005104 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4b1c      	ldr	r3, [pc, #112]	; (80051a0 <TIM_OC6_SetConfig+0x9c>)
 8005130:	4013      	ands	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	051b      	lsls	r3, r3, #20
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a13      	ldr	r2, [pc, #76]	; (80051a4 <TIM_OC6_SetConfig+0xa0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d003      	beq.n	8005164 <TIM_OC6_SetConfig+0x60>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <TIM_OC6_SetConfig+0xa4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d109      	bne.n	8005178 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800516a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	029b      	lsls	r3, r3, #10
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	621a      	str	r2, [r3, #32]
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	feff8fff 	.word	0xfeff8fff
 80051a4:	40010000 	.word	0x40010000
 80051a8:	40010400 	.word	0x40010400

080051ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f023 0201 	bic.w	r2, r3, #1
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f023 030a 	bic.w	r3, r3, #10
 80051e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	621a      	str	r2, [r3, #32]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800520a:	b480      	push	{r7}
 800520c:	b087      	sub	sp, #28
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f023 0210 	bic.w	r2, r3, #16
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	031b      	lsls	r3, r3, #12
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005246:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800526a:	b480      	push	{r7}
 800526c:	b085      	sub	sp, #20
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	f043 0307 	orr.w	r3, r3, #7
 800528c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	609a      	str	r2, [r3, #8]
}
 8005294:	bf00      	nop
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	021a      	lsls	r2, r3, #8
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	609a      	str	r2, [r3, #8]
}
 80052d4:	bf00      	nop
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 031f 	and.w	r3, r3, #31
 80052f2:	2201      	movs	r2, #1
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a1a      	ldr	r2, [r3, #32]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	43db      	mvns	r3, r3
 8005302:	401a      	ands	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	fa01 f303 	lsl.w	r3, r1, r3
 8005318:	431a      	orrs	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	621a      	str	r2, [r3, #32]
}
 800531e:	bf00      	nop
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
	...

0800532c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005340:	2302      	movs	r3, #2
 8005342:	e06d      	b.n	8005420 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a30      	ldr	r2, [pc, #192]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d004      	beq.n	8005378 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a2f      	ldr	r2, [pc, #188]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d108      	bne.n	800538a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800537e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005390:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a20      	ldr	r2, [pc, #128]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d022      	beq.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b6:	d01d      	beq.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1d      	ldr	r2, [pc, #116]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d018      	beq.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1c      	ldr	r2, [pc, #112]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d013      	beq.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1a      	ldr	r2, [pc, #104]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00e      	beq.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a15      	ldr	r2, [pc, #84]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d009      	beq.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a16      	ldr	r2, [pc, #88]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d004      	beq.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a15      	ldr	r2, [pc, #84]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d10c      	bne.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	4313      	orrs	r3, r2
 8005404:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	40010000 	.word	0x40010000
 8005430:	40010400 	.word	0x40010400
 8005434:	40000400 	.word	0x40000400
 8005438:	40000800 	.word	0x40000800
 800543c:	40000c00 	.word	0x40000c00
 8005440:	40014000 	.word	0x40014000
 8005444:	40001800 	.word	0x40001800

08005448 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e040      	b.n	80054dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fc fd70 	bl	8001f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2224      	movs	r2, #36	; 0x24
 8005474:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0201 	bic.w	r2, r2, #1
 8005484:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f82c 	bl	80054e4 <UART_SetConfig>
 800548c:	4603      	mov	r3, r0
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e022      	b.n	80054dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fa82 	bl	80059a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fb09 	bl	8005aec <UART_CheckIdleState>
 80054da:	4603      	mov	r3, r0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	4ba7      	ldr	r3, [pc, #668]	; (80057ac <UART_SetConfig+0x2c8>)
 8005510:	4013      	ands	r3, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6812      	ldr	r2, [r2, #0]
 8005516:	6979      	ldr	r1, [r7, #20]
 8005518:	430b      	orrs	r3, r1
 800551a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	430a      	orrs	r2, r1
 8005554:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a95      	ldr	r2, [pc, #596]	; (80057b0 <UART_SetConfig+0x2cc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d120      	bne.n	80055a2 <UART_SetConfig+0xbe>
 8005560:	4b94      	ldr	r3, [pc, #592]	; (80057b4 <UART_SetConfig+0x2d0>)
 8005562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	2b03      	cmp	r3, #3
 800556c:	d816      	bhi.n	800559c <UART_SetConfig+0xb8>
 800556e:	a201      	add	r2, pc, #4	; (adr r2, 8005574 <UART_SetConfig+0x90>)
 8005570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005574:	08005585 	.word	0x08005585
 8005578:	08005591 	.word	0x08005591
 800557c:	0800558b 	.word	0x0800558b
 8005580:	08005597 	.word	0x08005597
 8005584:	2301      	movs	r3, #1
 8005586:	77fb      	strb	r3, [r7, #31]
 8005588:	e14f      	b.n	800582a <UART_SetConfig+0x346>
 800558a:	2302      	movs	r3, #2
 800558c:	77fb      	strb	r3, [r7, #31]
 800558e:	e14c      	b.n	800582a <UART_SetConfig+0x346>
 8005590:	2304      	movs	r3, #4
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e149      	b.n	800582a <UART_SetConfig+0x346>
 8005596:	2308      	movs	r3, #8
 8005598:	77fb      	strb	r3, [r7, #31]
 800559a:	e146      	b.n	800582a <UART_SetConfig+0x346>
 800559c:	2310      	movs	r3, #16
 800559e:	77fb      	strb	r3, [r7, #31]
 80055a0:	e143      	b.n	800582a <UART_SetConfig+0x346>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a84      	ldr	r2, [pc, #528]	; (80057b8 <UART_SetConfig+0x2d4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d132      	bne.n	8005612 <UART_SetConfig+0x12e>
 80055ac:	4b81      	ldr	r3, [pc, #516]	; (80057b4 <UART_SetConfig+0x2d0>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b2:	f003 030c 	and.w	r3, r3, #12
 80055b6:	2b0c      	cmp	r3, #12
 80055b8:	d828      	bhi.n	800560c <UART_SetConfig+0x128>
 80055ba:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <UART_SetConfig+0xdc>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	080055f5 	.word	0x080055f5
 80055c4:	0800560d 	.word	0x0800560d
 80055c8:	0800560d 	.word	0x0800560d
 80055cc:	0800560d 	.word	0x0800560d
 80055d0:	08005601 	.word	0x08005601
 80055d4:	0800560d 	.word	0x0800560d
 80055d8:	0800560d 	.word	0x0800560d
 80055dc:	0800560d 	.word	0x0800560d
 80055e0:	080055fb 	.word	0x080055fb
 80055e4:	0800560d 	.word	0x0800560d
 80055e8:	0800560d 	.word	0x0800560d
 80055ec:	0800560d 	.word	0x0800560d
 80055f0:	08005607 	.word	0x08005607
 80055f4:	2300      	movs	r3, #0
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e117      	b.n	800582a <UART_SetConfig+0x346>
 80055fa:	2302      	movs	r3, #2
 80055fc:	77fb      	strb	r3, [r7, #31]
 80055fe:	e114      	b.n	800582a <UART_SetConfig+0x346>
 8005600:	2304      	movs	r3, #4
 8005602:	77fb      	strb	r3, [r7, #31]
 8005604:	e111      	b.n	800582a <UART_SetConfig+0x346>
 8005606:	2308      	movs	r3, #8
 8005608:	77fb      	strb	r3, [r7, #31]
 800560a:	e10e      	b.n	800582a <UART_SetConfig+0x346>
 800560c:	2310      	movs	r3, #16
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e10b      	b.n	800582a <UART_SetConfig+0x346>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a69      	ldr	r2, [pc, #420]	; (80057bc <UART_SetConfig+0x2d8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d120      	bne.n	800565e <UART_SetConfig+0x17a>
 800561c:	4b65      	ldr	r3, [pc, #404]	; (80057b4 <UART_SetConfig+0x2d0>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005626:	2b30      	cmp	r3, #48	; 0x30
 8005628:	d013      	beq.n	8005652 <UART_SetConfig+0x16e>
 800562a:	2b30      	cmp	r3, #48	; 0x30
 800562c:	d814      	bhi.n	8005658 <UART_SetConfig+0x174>
 800562e:	2b20      	cmp	r3, #32
 8005630:	d009      	beq.n	8005646 <UART_SetConfig+0x162>
 8005632:	2b20      	cmp	r3, #32
 8005634:	d810      	bhi.n	8005658 <UART_SetConfig+0x174>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <UART_SetConfig+0x15c>
 800563a:	2b10      	cmp	r3, #16
 800563c:	d006      	beq.n	800564c <UART_SetConfig+0x168>
 800563e:	e00b      	b.n	8005658 <UART_SetConfig+0x174>
 8005640:	2300      	movs	r3, #0
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e0f1      	b.n	800582a <UART_SetConfig+0x346>
 8005646:	2302      	movs	r3, #2
 8005648:	77fb      	strb	r3, [r7, #31]
 800564a:	e0ee      	b.n	800582a <UART_SetConfig+0x346>
 800564c:	2304      	movs	r3, #4
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e0eb      	b.n	800582a <UART_SetConfig+0x346>
 8005652:	2308      	movs	r3, #8
 8005654:	77fb      	strb	r3, [r7, #31]
 8005656:	e0e8      	b.n	800582a <UART_SetConfig+0x346>
 8005658:	2310      	movs	r3, #16
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e0e5      	b.n	800582a <UART_SetConfig+0x346>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a57      	ldr	r2, [pc, #348]	; (80057c0 <UART_SetConfig+0x2dc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d120      	bne.n	80056aa <UART_SetConfig+0x1c6>
 8005668:	4b52      	ldr	r3, [pc, #328]	; (80057b4 <UART_SetConfig+0x2d0>)
 800566a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005672:	2bc0      	cmp	r3, #192	; 0xc0
 8005674:	d013      	beq.n	800569e <UART_SetConfig+0x1ba>
 8005676:	2bc0      	cmp	r3, #192	; 0xc0
 8005678:	d814      	bhi.n	80056a4 <UART_SetConfig+0x1c0>
 800567a:	2b80      	cmp	r3, #128	; 0x80
 800567c:	d009      	beq.n	8005692 <UART_SetConfig+0x1ae>
 800567e:	2b80      	cmp	r3, #128	; 0x80
 8005680:	d810      	bhi.n	80056a4 <UART_SetConfig+0x1c0>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <UART_SetConfig+0x1a8>
 8005686:	2b40      	cmp	r3, #64	; 0x40
 8005688:	d006      	beq.n	8005698 <UART_SetConfig+0x1b4>
 800568a:	e00b      	b.n	80056a4 <UART_SetConfig+0x1c0>
 800568c:	2300      	movs	r3, #0
 800568e:	77fb      	strb	r3, [r7, #31]
 8005690:	e0cb      	b.n	800582a <UART_SetConfig+0x346>
 8005692:	2302      	movs	r3, #2
 8005694:	77fb      	strb	r3, [r7, #31]
 8005696:	e0c8      	b.n	800582a <UART_SetConfig+0x346>
 8005698:	2304      	movs	r3, #4
 800569a:	77fb      	strb	r3, [r7, #31]
 800569c:	e0c5      	b.n	800582a <UART_SetConfig+0x346>
 800569e:	2308      	movs	r3, #8
 80056a0:	77fb      	strb	r3, [r7, #31]
 80056a2:	e0c2      	b.n	800582a <UART_SetConfig+0x346>
 80056a4:	2310      	movs	r3, #16
 80056a6:	77fb      	strb	r3, [r7, #31]
 80056a8:	e0bf      	b.n	800582a <UART_SetConfig+0x346>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a45      	ldr	r2, [pc, #276]	; (80057c4 <UART_SetConfig+0x2e0>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d125      	bne.n	8005700 <UART_SetConfig+0x21c>
 80056b4:	4b3f      	ldr	r3, [pc, #252]	; (80057b4 <UART_SetConfig+0x2d0>)
 80056b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056c2:	d017      	beq.n	80056f4 <UART_SetConfig+0x210>
 80056c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056c8:	d817      	bhi.n	80056fa <UART_SetConfig+0x216>
 80056ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ce:	d00b      	beq.n	80056e8 <UART_SetConfig+0x204>
 80056d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056d4:	d811      	bhi.n	80056fa <UART_SetConfig+0x216>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <UART_SetConfig+0x1fe>
 80056da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056de:	d006      	beq.n	80056ee <UART_SetConfig+0x20a>
 80056e0:	e00b      	b.n	80056fa <UART_SetConfig+0x216>
 80056e2:	2300      	movs	r3, #0
 80056e4:	77fb      	strb	r3, [r7, #31]
 80056e6:	e0a0      	b.n	800582a <UART_SetConfig+0x346>
 80056e8:	2302      	movs	r3, #2
 80056ea:	77fb      	strb	r3, [r7, #31]
 80056ec:	e09d      	b.n	800582a <UART_SetConfig+0x346>
 80056ee:	2304      	movs	r3, #4
 80056f0:	77fb      	strb	r3, [r7, #31]
 80056f2:	e09a      	b.n	800582a <UART_SetConfig+0x346>
 80056f4:	2308      	movs	r3, #8
 80056f6:	77fb      	strb	r3, [r7, #31]
 80056f8:	e097      	b.n	800582a <UART_SetConfig+0x346>
 80056fa:	2310      	movs	r3, #16
 80056fc:	77fb      	strb	r3, [r7, #31]
 80056fe:	e094      	b.n	800582a <UART_SetConfig+0x346>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a30      	ldr	r2, [pc, #192]	; (80057c8 <UART_SetConfig+0x2e4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d125      	bne.n	8005756 <UART_SetConfig+0x272>
 800570a:	4b2a      	ldr	r3, [pc, #168]	; (80057b4 <UART_SetConfig+0x2d0>)
 800570c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005710:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005714:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005718:	d017      	beq.n	800574a <UART_SetConfig+0x266>
 800571a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800571e:	d817      	bhi.n	8005750 <UART_SetConfig+0x26c>
 8005720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005724:	d00b      	beq.n	800573e <UART_SetConfig+0x25a>
 8005726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800572a:	d811      	bhi.n	8005750 <UART_SetConfig+0x26c>
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <UART_SetConfig+0x254>
 8005730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005734:	d006      	beq.n	8005744 <UART_SetConfig+0x260>
 8005736:	e00b      	b.n	8005750 <UART_SetConfig+0x26c>
 8005738:	2301      	movs	r3, #1
 800573a:	77fb      	strb	r3, [r7, #31]
 800573c:	e075      	b.n	800582a <UART_SetConfig+0x346>
 800573e:	2302      	movs	r3, #2
 8005740:	77fb      	strb	r3, [r7, #31]
 8005742:	e072      	b.n	800582a <UART_SetConfig+0x346>
 8005744:	2304      	movs	r3, #4
 8005746:	77fb      	strb	r3, [r7, #31]
 8005748:	e06f      	b.n	800582a <UART_SetConfig+0x346>
 800574a:	2308      	movs	r3, #8
 800574c:	77fb      	strb	r3, [r7, #31]
 800574e:	e06c      	b.n	800582a <UART_SetConfig+0x346>
 8005750:	2310      	movs	r3, #16
 8005752:	77fb      	strb	r3, [r7, #31]
 8005754:	e069      	b.n	800582a <UART_SetConfig+0x346>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1c      	ldr	r2, [pc, #112]	; (80057cc <UART_SetConfig+0x2e8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d137      	bne.n	80057d0 <UART_SetConfig+0x2ec>
 8005760:	4b14      	ldr	r3, [pc, #80]	; (80057b4 <UART_SetConfig+0x2d0>)
 8005762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005766:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800576a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800576e:	d017      	beq.n	80057a0 <UART_SetConfig+0x2bc>
 8005770:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005774:	d817      	bhi.n	80057a6 <UART_SetConfig+0x2c2>
 8005776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800577a:	d00b      	beq.n	8005794 <UART_SetConfig+0x2b0>
 800577c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005780:	d811      	bhi.n	80057a6 <UART_SetConfig+0x2c2>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <UART_SetConfig+0x2aa>
 8005786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578a:	d006      	beq.n	800579a <UART_SetConfig+0x2b6>
 800578c:	e00b      	b.n	80057a6 <UART_SetConfig+0x2c2>
 800578e:	2300      	movs	r3, #0
 8005790:	77fb      	strb	r3, [r7, #31]
 8005792:	e04a      	b.n	800582a <UART_SetConfig+0x346>
 8005794:	2302      	movs	r3, #2
 8005796:	77fb      	strb	r3, [r7, #31]
 8005798:	e047      	b.n	800582a <UART_SetConfig+0x346>
 800579a:	2304      	movs	r3, #4
 800579c:	77fb      	strb	r3, [r7, #31]
 800579e:	e044      	b.n	800582a <UART_SetConfig+0x346>
 80057a0:	2308      	movs	r3, #8
 80057a2:	77fb      	strb	r3, [r7, #31]
 80057a4:	e041      	b.n	800582a <UART_SetConfig+0x346>
 80057a6:	2310      	movs	r3, #16
 80057a8:	77fb      	strb	r3, [r7, #31]
 80057aa:	e03e      	b.n	800582a <UART_SetConfig+0x346>
 80057ac:	efff69f3 	.word	0xefff69f3
 80057b0:	40011000 	.word	0x40011000
 80057b4:	40023800 	.word	0x40023800
 80057b8:	40004400 	.word	0x40004400
 80057bc:	40004800 	.word	0x40004800
 80057c0:	40004c00 	.word	0x40004c00
 80057c4:	40005000 	.word	0x40005000
 80057c8:	40011400 	.word	0x40011400
 80057cc:	40007800 	.word	0x40007800
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a71      	ldr	r2, [pc, #452]	; (800599c <UART_SetConfig+0x4b8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d125      	bne.n	8005826 <UART_SetConfig+0x342>
 80057da:	4b71      	ldr	r3, [pc, #452]	; (80059a0 <UART_SetConfig+0x4bc>)
 80057dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057e8:	d017      	beq.n	800581a <UART_SetConfig+0x336>
 80057ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057ee:	d817      	bhi.n	8005820 <UART_SetConfig+0x33c>
 80057f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f4:	d00b      	beq.n	800580e <UART_SetConfig+0x32a>
 80057f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057fa:	d811      	bhi.n	8005820 <UART_SetConfig+0x33c>
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <UART_SetConfig+0x324>
 8005800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005804:	d006      	beq.n	8005814 <UART_SetConfig+0x330>
 8005806:	e00b      	b.n	8005820 <UART_SetConfig+0x33c>
 8005808:	2300      	movs	r3, #0
 800580a:	77fb      	strb	r3, [r7, #31]
 800580c:	e00d      	b.n	800582a <UART_SetConfig+0x346>
 800580e:	2302      	movs	r3, #2
 8005810:	77fb      	strb	r3, [r7, #31]
 8005812:	e00a      	b.n	800582a <UART_SetConfig+0x346>
 8005814:	2304      	movs	r3, #4
 8005816:	77fb      	strb	r3, [r7, #31]
 8005818:	e007      	b.n	800582a <UART_SetConfig+0x346>
 800581a:	2308      	movs	r3, #8
 800581c:	77fb      	strb	r3, [r7, #31]
 800581e:	e004      	b.n	800582a <UART_SetConfig+0x346>
 8005820:	2310      	movs	r3, #16
 8005822:	77fb      	strb	r3, [r7, #31]
 8005824:	e001      	b.n	800582a <UART_SetConfig+0x346>
 8005826:	2310      	movs	r3, #16
 8005828:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005832:	d15a      	bne.n	80058ea <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005834:	7ffb      	ldrb	r3, [r7, #31]
 8005836:	2b08      	cmp	r3, #8
 8005838:	d827      	bhi.n	800588a <UART_SetConfig+0x3a6>
 800583a:	a201      	add	r2, pc, #4	; (adr r2, 8005840 <UART_SetConfig+0x35c>)
 800583c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005840:	08005865 	.word	0x08005865
 8005844:	0800586d 	.word	0x0800586d
 8005848:	08005875 	.word	0x08005875
 800584c:	0800588b 	.word	0x0800588b
 8005850:	0800587b 	.word	0x0800587b
 8005854:	0800588b 	.word	0x0800588b
 8005858:	0800588b 	.word	0x0800588b
 800585c:	0800588b 	.word	0x0800588b
 8005860:	08005883 	.word	0x08005883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005864:	f7fd fdb6 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 8005868:	61b8      	str	r0, [r7, #24]
        break;
 800586a:	e013      	b.n	8005894 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800586c:	f7fd fdc6 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8005870:	61b8      	str	r0, [r7, #24]
        break;
 8005872:	e00f      	b.n	8005894 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005874:	4b4b      	ldr	r3, [pc, #300]	; (80059a4 <UART_SetConfig+0x4c0>)
 8005876:	61bb      	str	r3, [r7, #24]
        break;
 8005878:	e00c      	b.n	8005894 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800587a:	f7fd fcbd 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 800587e:	61b8      	str	r0, [r7, #24]
        break;
 8005880:	e008      	b.n	8005894 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005886:	61bb      	str	r3, [r7, #24]
        break;
 8005888:	e004      	b.n	8005894 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	77bb      	strb	r3, [r7, #30]
        break;
 8005892:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d074      	beq.n	8005984 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	005a      	lsls	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	441a      	add	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	2b0f      	cmp	r3, #15
 80058b4:	d916      	bls.n	80058e4 <UART_SetConfig+0x400>
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058bc:	d212      	bcs.n	80058e4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f023 030f 	bic.w	r3, r3, #15
 80058c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	085b      	lsrs	r3, r3, #1
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	89fb      	ldrh	r3, [r7, #14]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	89fa      	ldrh	r2, [r7, #14]
 80058e0:	60da      	str	r2, [r3, #12]
 80058e2:	e04f      	b.n	8005984 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	77bb      	strb	r3, [r7, #30]
 80058e8:	e04c      	b.n	8005984 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058ea:	7ffb      	ldrb	r3, [r7, #31]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d828      	bhi.n	8005942 <UART_SetConfig+0x45e>
 80058f0:	a201      	add	r2, pc, #4	; (adr r2, 80058f8 <UART_SetConfig+0x414>)
 80058f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f6:	bf00      	nop
 80058f8:	0800591d 	.word	0x0800591d
 80058fc:	08005925 	.word	0x08005925
 8005900:	0800592d 	.word	0x0800592d
 8005904:	08005943 	.word	0x08005943
 8005908:	08005933 	.word	0x08005933
 800590c:	08005943 	.word	0x08005943
 8005910:	08005943 	.word	0x08005943
 8005914:	08005943 	.word	0x08005943
 8005918:	0800593b 	.word	0x0800593b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800591c:	f7fd fd5a 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 8005920:	61b8      	str	r0, [r7, #24]
        break;
 8005922:	e013      	b.n	800594c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005924:	f7fd fd6a 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8005928:	61b8      	str	r0, [r7, #24]
        break;
 800592a:	e00f      	b.n	800594c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800592c:	4b1d      	ldr	r3, [pc, #116]	; (80059a4 <UART_SetConfig+0x4c0>)
 800592e:	61bb      	str	r3, [r7, #24]
        break;
 8005930:	e00c      	b.n	800594c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005932:	f7fd fc61 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 8005936:	61b8      	str	r0, [r7, #24]
        break;
 8005938:	e008      	b.n	800594c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800593e:	61bb      	str	r3, [r7, #24]
        break;
 8005940:	e004      	b.n	800594c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	77bb      	strb	r3, [r7, #30]
        break;
 800594a:	bf00      	nop
    }

    if (pclk != 0U)
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d018      	beq.n	8005984 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	085a      	lsrs	r2, r3, #1
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	441a      	add	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	fbb2 f3f3 	udiv	r3, r2, r3
 8005964:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b0f      	cmp	r3, #15
 800596a:	d909      	bls.n	8005980 <UART_SetConfig+0x49c>
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005972:	d205      	bcs.n	8005980 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	b29a      	uxth	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60da      	str	r2, [r3, #12]
 800597e:	e001      	b.n	8005984 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005990:	7fbb      	ldrb	r3, [r7, #30]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3720      	adds	r7, #32
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	40007c00 	.word	0x40007c00
 80059a0:	40023800 	.word	0x40023800
 80059a4:	00f42400 	.word	0x00f42400

080059a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00a      	beq.n	80059d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01a      	beq.n	8005abe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aa6:	d10a      	bne.n	8005abe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	605a      	str	r2, [r3, #4]
  }
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005afc:	f7fc fbb8 	bl	8002270 <HAL_GetTick>
 8005b00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d10e      	bne.n	8005b2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f817 	bl	8005b52 <UART_WaitOnFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e00d      	b.n	8005b4a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b09c      	sub	sp, #112	; 0x70
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	603b      	str	r3, [r7, #0]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b62:	e0a5      	b.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6a:	f000 80a1 	beq.w	8005cb0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b6e:	f7fc fb7f 	bl	8002270 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d302      	bcc.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d13e      	bne.n	8005c02 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b98:	667b      	str	r3, [r7, #100]	; 0x64
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ba2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ba4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ba8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005baa:	e841 2300 	strex	r3, r2, [r1]
 8005bae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e6      	bne.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3308      	adds	r3, #8
 8005bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc0:	e853 3f00 	ldrex	r3, [r3]
 8005bc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc8:	f023 0301 	bic.w	r3, r3, #1
 8005bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005bd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e5      	bne.n	8005bb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2220      	movs	r2, #32
 8005bee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e067      	b.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d04f      	beq.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c1e:	d147      	bne.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c48:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c50:	e841 2300 	strex	r3, r2, [r1]
 8005c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1e6      	bne.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3308      	adds	r3, #8
 8005c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	e853 3f00 	ldrex	r3, [r3]
 8005c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f023 0301 	bic.w	r3, r3, #1
 8005c72:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3308      	adds	r3, #8
 8005c7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c7c:	623a      	str	r2, [r7, #32]
 8005c7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	69f9      	ldr	r1, [r7, #28]
 8005c82:	6a3a      	ldr	r2, [r7, #32]
 8005c84:	e841 2300 	strex	r3, r2, [r1]
 8005c88:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e5      	bne.n	8005c5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2220      	movs	r2, #32
 8005c94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e010      	b.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69da      	ldr	r2, [r3, #28]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2301      	moveq	r3, #1
 8005cc2:	2300      	movne	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	f43f af4a 	beq.w	8005b64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3770      	adds	r7, #112	; 0x70
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cdc:	b084      	sub	sp, #16
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	f107 001c 	add.w	r0, r7, #28
 8005cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d120      	bne.n	8005d36 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	4b20      	ldr	r3, [pc, #128]	; (8005d88 <USB_CoreInit+0xac>)
 8005d06:	4013      	ands	r3, r2
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d105      	bne.n	8005d2a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fa92 	bl	8006254 <USB_CoreReset>
 8005d30:	4603      	mov	r3, r0
 8005d32:	73fb      	strb	r3, [r7, #15]
 8005d34:	e010      	b.n	8005d58 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fa86 	bl	8006254 <USB_CoreReset>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d10b      	bne.n	8005d76 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f043 0206 	orr.w	r2, r3, #6
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f043 0220 	orr.w	r2, r3, #32
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d82:	b004      	add	sp, #16
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	ffbdffbf 	.word	0xffbdffbf

08005d8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f023 0201 	bic.w	r2, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	460b      	mov	r3, r1
 8005db8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005dca:	78fb      	ldrb	r3, [r7, #3]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d115      	bne.n	8005dfc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ddc:	2001      	movs	r0, #1
 8005dde:	f7fc fa53 	bl	8002288 <HAL_Delay>
      ms++;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3301      	adds	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fa25 	bl	8006238 <USB_GetMode>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d01e      	beq.n	8005e32 <USB_SetCurrentMode+0x84>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b31      	cmp	r3, #49	; 0x31
 8005df8:	d9f0      	bls.n	8005ddc <USB_SetCurrentMode+0x2e>
 8005dfa:	e01a      	b.n	8005e32 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d115      	bne.n	8005e2e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e0e:	2001      	movs	r0, #1
 8005e10:	f7fc fa3a 	bl	8002288 <HAL_Delay>
      ms++;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3301      	adds	r3, #1
 8005e18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fa0c 	bl	8006238 <USB_GetMode>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d005      	beq.n	8005e32 <USB_SetCurrentMode+0x84>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b31      	cmp	r3, #49	; 0x31
 8005e2a:	d9f0      	bls.n	8005e0e <USB_SetCurrentMode+0x60>
 8005e2c:	e001      	b.n	8005e32 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e005      	b.n	8005e3e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b32      	cmp	r3, #50	; 0x32
 8005e36:	d101      	bne.n	8005e3c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e000      	b.n	8005e3e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e48:	b084      	sub	sp, #16
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b086      	sub	sp, #24
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e62:	2300      	movs	r3, #0
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	e009      	b.n	8005e7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	3340      	adds	r3, #64	; 0x40
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	2200      	movs	r2, #0
 8005e74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	2b0e      	cmp	r3, #14
 8005e80:	d9f2      	bls.n	8005e68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d11c      	bne.n	8005ec2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e96:	f043 0302 	orr.w	r3, r3, #2
 8005e9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	e005      	b.n	8005ece <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee8:	461a      	mov	r2, r3
 8005eea:	680b      	ldr	r3, [r1, #0]
 8005eec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d10c      	bne.n	8005f0e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d104      	bne.n	8005f04 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005efa:	2100      	movs	r1, #0
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f961 	bl	80061c4 <USB_SetDevSpeed>
 8005f02:	e008      	b.n	8005f16 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f04:	2101      	movs	r1, #1
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f95c 	bl	80061c4 <USB_SetDevSpeed>
 8005f0c:	e003      	b.n	8005f16 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f0e:	2103      	movs	r1, #3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f957 	bl	80061c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f16:	2110      	movs	r1, #16
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f8f3 	bl	8006104 <USB_FlushTxFifo>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f91d 	bl	8006168 <USB_FlushRxFifo>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3e:	461a      	mov	r2, r3
 8005f40:	2300      	movs	r3, #0
 8005f42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f56:	461a      	mov	r2, r3
 8005f58:	2300      	movs	r3, #0
 8005f5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	e043      	b.n	8005fea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f78:	d118      	bne.n	8005fac <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	e013      	b.n	8005fbe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	e008      	b.n	8005fbe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb8:	461a      	mov	r2, r3
 8005fba:	2300      	movs	r3, #0
 8005fbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2300      	movs	r3, #0
 8005fce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fe2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d3b7      	bcc.n	8005f62 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	e043      	b.n	8006080 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800600a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800600e:	d118      	bne.n	8006042 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006022:	461a      	mov	r2, r3
 8006024:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	e013      	b.n	8006054 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006038:	461a      	mov	r2, r3
 800603a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	e008      	b.n	8006054 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604e:	461a      	mov	r2, r3
 8006050:	2300      	movs	r3, #0
 8006052:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006060:	461a      	mov	r2, r3
 8006062:	2300      	movs	r3, #0
 8006064:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006072:	461a      	mov	r2, r3
 8006074:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006078:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	3301      	adds	r3, #1
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	429a      	cmp	r2, r3
 8006086:	d3b7      	bcc.n	8005ff8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800609a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d105      	bne.n	80060bc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	f043 0210 	orr.w	r2, r3, #16
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	699a      	ldr	r2, [r3, #24]
 80060c0:	4b0e      	ldr	r3, [pc, #56]	; (80060fc <USB_DevInit+0x2b4>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80060c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	f043 0208 	orr.w	r2, r3, #8
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80060da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d105      	bne.n	80060ec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	699a      	ldr	r2, [r3, #24]
 80060e4:	4b06      	ldr	r3, [pc, #24]	; (8006100 <USB_DevInit+0x2b8>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80060ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060f8:	b004      	add	sp, #16
 80060fa:	4770      	bx	lr
 80060fc:	803c3800 	.word	0x803c3800
 8006100:	40000004 	.word	0x40000004

08006104 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3301      	adds	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	4a12      	ldr	r2, [pc, #72]	; (8006164 <USB_FlushTxFifo+0x60>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d901      	bls.n	8006122 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e01a      	b.n	8006158 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	daf3      	bge.n	8006112 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	019b      	lsls	r3, r3, #6
 8006132:	f043 0220 	orr.w	r2, r3, #32
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3301      	adds	r3, #1
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	4a08      	ldr	r2, [pc, #32]	; (8006164 <USB_FlushTxFifo+0x60>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d901      	bls.n	800614a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e006      	b.n	8006158 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f003 0320 	and.w	r3, r3, #32
 8006152:	2b20      	cmp	r3, #32
 8006154:	d0f1      	beq.n	800613a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	00030d40 	.word	0x00030d40

08006168 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3301      	adds	r3, #1
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	4a11      	ldr	r2, [pc, #68]	; (80061c0 <USB_FlushRxFifo+0x58>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d901      	bls.n	8006184 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e017      	b.n	80061b4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	daf3      	bge.n	8006174 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2210      	movs	r2, #16
 8006194:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3301      	adds	r3, #1
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	4a08      	ldr	r2, [pc, #32]	; (80061c0 <USB_FlushRxFifo+0x58>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d901      	bls.n	80061a6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e006      	b.n	80061b4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f003 0310 	and.w	r3, r3, #16
 80061ae:	2b10      	cmp	r3, #16
 80061b0:	d0f1      	beq.n	8006196 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	00030d40 	.word	0x00030d40

080061c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	68f9      	ldr	r1, [r7, #12]
 80061e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061e4:	4313      	orrs	r3, r2
 80061e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b085      	sub	sp, #20
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006210:	f023 0303 	bic.w	r3, r3, #3
 8006214:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006224:	f043 0302 	orr.w	r3, r3, #2
 8006228:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	f003 0301 	and.w	r3, r3, #1
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3301      	adds	r3, #1
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	4a13      	ldr	r2, [pc, #76]	; (80062b4 <USB_CoreReset+0x60>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d901      	bls.n	8006270 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e01a      	b.n	80062a6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	daf3      	bge.n	8006260 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	f043 0201 	orr.w	r2, r3, #1
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3301      	adds	r3, #1
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <USB_CoreReset+0x60>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d901      	bls.n	8006298 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e006      	b.n	80062a6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d0f1      	beq.n	8006288 <USB_CoreReset+0x34>

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	00030d40 	.word	0x00030d40

080062b8 <__libc_init_array>:
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	4d0d      	ldr	r5, [pc, #52]	; (80062f0 <__libc_init_array+0x38>)
 80062bc:	4c0d      	ldr	r4, [pc, #52]	; (80062f4 <__libc_init_array+0x3c>)
 80062be:	1b64      	subs	r4, r4, r5
 80062c0:	10a4      	asrs	r4, r4, #2
 80062c2:	2600      	movs	r6, #0
 80062c4:	42a6      	cmp	r6, r4
 80062c6:	d109      	bne.n	80062dc <__libc_init_array+0x24>
 80062c8:	4d0b      	ldr	r5, [pc, #44]	; (80062f8 <__libc_init_array+0x40>)
 80062ca:	4c0c      	ldr	r4, [pc, #48]	; (80062fc <__libc_init_array+0x44>)
 80062cc:	f000 f820 	bl	8006310 <_init>
 80062d0:	1b64      	subs	r4, r4, r5
 80062d2:	10a4      	asrs	r4, r4, #2
 80062d4:	2600      	movs	r6, #0
 80062d6:	42a6      	cmp	r6, r4
 80062d8:	d105      	bne.n	80062e6 <__libc_init_array+0x2e>
 80062da:	bd70      	pop	{r4, r5, r6, pc}
 80062dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80062e0:	4798      	blx	r3
 80062e2:	3601      	adds	r6, #1
 80062e4:	e7ee      	b.n	80062c4 <__libc_init_array+0xc>
 80062e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ea:	4798      	blx	r3
 80062ec:	3601      	adds	r6, #1
 80062ee:	e7f2      	b.n	80062d6 <__libc_init_array+0x1e>
 80062f0:	08006360 	.word	0x08006360
 80062f4:	08006360 	.word	0x08006360
 80062f8:	08006360 	.word	0x08006360
 80062fc:	08006364 	.word	0x08006364

08006300 <memset>:
 8006300:	4402      	add	r2, r0
 8006302:	4603      	mov	r3, r0
 8006304:	4293      	cmp	r3, r2
 8006306:	d100      	bne.n	800630a <memset+0xa>
 8006308:	4770      	bx	lr
 800630a:	f803 1b01 	strb.w	r1, [r3], #1
 800630e:	e7f9      	b.n	8006304 <memset+0x4>

08006310 <_init>:
 8006310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006312:	bf00      	nop
 8006314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006316:	bc08      	pop	{r3}
 8006318:	469e      	mov	lr, r3
 800631a:	4770      	bx	lr

0800631c <_fini>:
 800631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631e:	bf00      	nop
 8006320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006322:	bc08      	pop	{r3}
 8006324:	469e      	mov	lr, r3
 8006326:	4770      	bx	lr
